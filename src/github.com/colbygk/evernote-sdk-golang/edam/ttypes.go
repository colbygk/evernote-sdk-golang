// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package edam

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/colbygk/evernote-sdk-golang/edam"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = edam.GoUnusedProtection__
var _ = edam.GoUnusedProtection__
var _ = edam.GoUnusedProtection__
var _ = edam.GoUnusedProtection__
var GoUnusedProtection__ int

//Privilege levels for accessing shared notebooks.
//
//READ_NOTEBOOK: Recipient is able to read the contents of the shared notebook
//  but does not have access to information about other recipients of the
//  notebook or the activity stream information.
//
//READ_NOTEBOOK_PLUS_ACTIVITY: Recipient has READ_NOTEBOOK rights and can also
//  access information about other recipients and the activity stream.
//
//MODIFY_NOTEBOOK_PLUS_ACTIVITY: Recipient has rights to read and modify the contents
//  of the shared notebook, including the right to move notes to the trash and to create
//  notes in the notebook.  The recipient can also access information about other
//  recipients and the activity stream.
//
//FULL_ACCESS: Recipient has full rights to the shared notebook and recipient lists,
//  including privilege to revoke and create invitations and to change privilege
//  levels on invitations for individuals. If the user is a member of the same group,
//  (e.g. the same business) as the shared notebook, they will additionally be granted
//  permissions to update the publishing status of the notebook.
type ShareRelationshipPrivilegeLevel int64

const (
	ShareRelationshipPrivilegeLevel_READ_NOTEBOOK                 ShareRelationshipPrivilegeLevel = 0
	ShareRelationshipPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY   ShareRelationshipPrivilegeLevel = 10
	ShareRelationshipPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY ShareRelationshipPrivilegeLevel = 20
	ShareRelationshipPrivilegeLevel_FULL_ACCESS                   ShareRelationshipPrivilegeLevel = 30
)

func (p ShareRelationshipPrivilegeLevel) String() string {
	switch p {
	case ShareRelationshipPrivilegeLevel_READ_NOTEBOOK:
		return "ShareRelationshipPrivilegeLevel_READ_NOTEBOOK"
	case ShareRelationshipPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY:
		return "ShareRelationshipPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY"
	case ShareRelationshipPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY:
		return "ShareRelationshipPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY"
	case ShareRelationshipPrivilegeLevel_FULL_ACCESS:
		return "ShareRelationshipPrivilegeLevel_FULL_ACCESS"
	}
	return "<UNSET>"
}

func ShareRelationshipPrivilegeLevelFromString(s string) (ShareRelationshipPrivilegeLevel, error) {
	switch s {
	case "ShareRelationshipPrivilegeLevel_READ_NOTEBOOK":
		return ShareRelationshipPrivilegeLevel_READ_NOTEBOOK, nil
	case "ShareRelationshipPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY":
		return ShareRelationshipPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY, nil
	case "ShareRelationshipPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY":
		return ShareRelationshipPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY, nil
	case "ShareRelationshipPrivilegeLevel_FULL_ACCESS":
		return ShareRelationshipPrivilegeLevel_FULL_ACCESS, nil
	}
	return ShareRelationshipPrivilegeLevel(math.MinInt32 - 1), fmt.Errorf("not a valid ShareRelationshipPrivilegeLevel string")
}

type SyncState struct {
	CurrentTime           edam.Timestamp      `thrift:"currentTime,1,required"`
	FullSyncBefore        edam.Timestamp      `thrift:"fullSyncBefore,2,required"`
	UpdateCount           int32               `thrift:"updateCount,3,required"`
	Uploaded              int64               `thrift:"uploaded,4"`
	UserLastUpdated       edam.Timestamp      `thrift:"userLastUpdated,5"`
	UserMaxMessageEventId edam.MessageEventID `thrift:"userMaxMessageEventId,6"`
}

func NewSyncState() *SyncState {
	return &SyncState{}
}

func (p *SyncState) IsSetUploaded() bool {
	return p.Uploaded != 0
}

func (p *SyncState) IsSetUserLastUpdated() bool {
	return p.UserLastUpdated != 0
}

func (p *SyncState) IsSetUserMaxMessageEventId() bool {
	return p.UserMaxMessageEventId != 0
}

func (p *SyncState) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SyncState) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.CurrentTime = edam.Timestamp(v)
	}
	return nil
}

func (p *SyncState) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.FullSyncBefore = edam.Timestamp(v)
	}
	return nil
}

func (p *SyncState) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.UpdateCount = v
	}
	return nil
}

func (p *SyncState) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Uploaded = v
	}
	return nil
}

func (p *SyncState) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.UserLastUpdated = edam.Timestamp(v)
	}
	return nil
}

func (p *SyncState) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.UserMaxMessageEventId = edam.MessageEventID(v)
	}
	return nil
}

func (p *SyncState) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncState"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SyncState) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentTime", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:currentTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CurrentTime)); err != nil {
		return fmt.Errorf("%T.currentTime (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:currentTime: %s", p, err)
	}
	return err
}

func (p *SyncState) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fullSyncBefore", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:fullSyncBefore: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.FullSyncBefore)); err != nil {
		return fmt.Errorf("%T.fullSyncBefore (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:fullSyncBefore: %s", p, err)
	}
	return err
}

func (p *SyncState) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateCount", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:updateCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UpdateCount)); err != nil {
		return fmt.Errorf("%T.updateCount (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:updateCount: %s", p, err)
	}
	return err
}

func (p *SyncState) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUploaded() {
		if err := oprot.WriteFieldBegin("uploaded", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:uploaded: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Uploaded)); err != nil {
			return fmt.Errorf("%T.uploaded (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:uploaded: %s", p, err)
		}
	}
	return err
}

func (p *SyncState) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserLastUpdated() {
		if err := oprot.WriteFieldBegin("userLastUpdated", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:userLastUpdated: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.UserLastUpdated)); err != nil {
			return fmt.Errorf("%T.userLastUpdated (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:userLastUpdated: %s", p, err)
		}
	}
	return err
}

func (p *SyncState) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserMaxMessageEventId() {
		if err := oprot.WriteFieldBegin("userMaxMessageEventId", thrift.I64, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:userMaxMessageEventId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.UserMaxMessageEventId)); err != nil {
			return fmt.Errorf("%T.userMaxMessageEventId (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:userMaxMessageEventId: %s", p, err)
		}
	}
	return err
}

func (p *SyncState) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncState(%+v)", *p)
}

type SyncChunk struct {
	CurrentTime             edam.Timestamp         `thrift:"currentTime,1,required"`
	ChunkHighUSN            int32                  `thrift:"chunkHighUSN,2"`
	UpdateCount             int32                  `thrift:"updateCount,3,required"`
	Notes                   []*edam.Note           `thrift:"notes,4"`
	Notebooks               []*edam.Notebook       `thrift:"notebooks,5"`
	Tags                    []*edam.Tag            `thrift:"tags,6"`
	Searches                []*edam.SavedSearch    `thrift:"searches,7"`
	Resources               []*edam.Resource       `thrift:"resources,8"`
	ExpungedNotes           []edam.Guid            `thrift:"expungedNotes,9"`
	ExpungedNotebooks       []edam.Guid            `thrift:"expungedNotebooks,10"`
	ExpungedTags            []edam.Guid            `thrift:"expungedTags,11"`
	ExpungedSearches        []edam.Guid            `thrift:"expungedSearches,12"`
	LinkedNotebooks         []*edam.LinkedNotebook `thrift:"linkedNotebooks,13"`
	ExpungedLinkedNotebooks []edam.Guid            `thrift:"expungedLinkedNotebooks,14"`
}

func NewSyncChunk() *SyncChunk {
	return &SyncChunk{}
}

func (p *SyncChunk) IsSetChunkHighUSN() bool {
	return p.ChunkHighUSN != 0
}

func (p *SyncChunk) IsSetNotes() bool {
	return p.Notes != nil && len(p.Notes) > 0
}

func (p *SyncChunk) IsSetNotebooks() bool {
	return p.Notebooks != nil && len(p.Notebooks) > 0
}

func (p *SyncChunk) IsSetTags() bool {
	return p.Tags != nil && len(p.Tags) > 0
}

func (p *SyncChunk) IsSetSearches() bool {
	return p.Searches != nil && len(p.Searches) > 0
}

func (p *SyncChunk) IsSetResources() bool {
	return p.Resources != nil && len(p.Resources) > 0
}

func (p *SyncChunk) IsSetExpungedNotes() bool {
	return p.ExpungedNotes != nil && len(p.ExpungedNotes) > 0
}

func (p *SyncChunk) IsSetExpungedNotebooks() bool {
	return p.ExpungedNotebooks != nil && len(p.ExpungedNotebooks) > 0
}

func (p *SyncChunk) IsSetExpungedTags() bool {
	return p.ExpungedTags != nil && len(p.ExpungedTags) > 0
}

func (p *SyncChunk) IsSetExpungedSearches() bool {
	return p.ExpungedSearches != nil && len(p.ExpungedSearches) > 0
}

func (p *SyncChunk) IsSetLinkedNotebooks() bool {
	return p.LinkedNotebooks != nil && len(p.LinkedNotebooks) > 0
}

func (p *SyncChunk) IsSetExpungedLinkedNotebooks() bool {
	return p.ExpungedLinkedNotebooks != nil && len(p.ExpungedLinkedNotebooks) > 0
}

func (p *SyncChunk) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SyncChunk) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.CurrentTime = edam.Timestamp(v)
	}
	return nil
}

func (p *SyncChunk) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ChunkHighUSN = v
	}
	return nil
}

func (p *SyncChunk) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.UpdateCount = v
	}
	return nil
}

func (p *SyncChunk) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Notes = make([]*edam.Note, 0, size)
	for i := 0; i < size; i++ {
		_elem0 := edam.NewNote()
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0)
		}
		p.Notes = append(p.Notes, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Notebooks = make([]*edam.Notebook, 0, size)
	for i := 0; i < size; i++ {
		_elem1 := edam.NewNotebook()
		if err := _elem1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem1)
		}
		p.Notebooks = append(p.Notebooks, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Tags = make([]*edam.Tag, 0, size)
	for i := 0; i < size; i++ {
		_elem2 := edam.NewTag()
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2)
		}
		p.Tags = append(p.Tags, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Searches = make([]*edam.SavedSearch, 0, size)
	for i := 0; i < size; i++ {
		_elem3 := edam.NewSavedSearch()
		if err := _elem3.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem3)
		}
		p.Searches = append(p.Searches, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Resources = make([]*edam.Resource, 0, size)
	for i := 0; i < size; i++ {
		_elem4 := edam.NewResource()
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4)
		}
		p.Resources = append(p.Resources, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ExpungedNotes = make([]edam.Guid, 0, size)
	for i := 0; i < size; i++ {
		var _elem5 edam.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem5 = edam.Guid(v)
		}
		p.ExpungedNotes = append(p.ExpungedNotes, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ExpungedNotebooks = make([]edam.Guid, 0, size)
	for i := 0; i < size; i++ {
		var _elem6 edam.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem6 = edam.Guid(v)
		}
		p.ExpungedNotebooks = append(p.ExpungedNotebooks, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ExpungedTags = make([]edam.Guid, 0, size)
	for i := 0; i < size; i++ {
		var _elem7 edam.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem7 = edam.Guid(v)
		}
		p.ExpungedTags = append(p.ExpungedTags, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ExpungedSearches = make([]edam.Guid, 0, size)
	for i := 0; i < size; i++ {
		var _elem8 edam.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem8 = edam.Guid(v)
		}
		p.ExpungedSearches = append(p.ExpungedSearches, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.LinkedNotebooks = make([]*edam.LinkedNotebook, 0, size)
	for i := 0; i < size; i++ {
		_elem9 := edam.NewLinkedNotebook()
		if err := _elem9.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem9)
		}
		p.LinkedNotebooks = append(p.LinkedNotebooks, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ExpungedLinkedNotebooks = make([]edam.Guid, 0, size)
	for i := 0; i < size; i++ {
		var _elem10 edam.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem10 = edam.Guid(v)
		}
		p.ExpungedLinkedNotebooks = append(p.ExpungedLinkedNotebooks, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncChunk"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SyncChunk) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentTime", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:currentTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CurrentTime)); err != nil {
		return fmt.Errorf("%T.currentTime (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:currentTime: %s", p, err)
	}
	return err
}

func (p *SyncChunk) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetChunkHighUSN() {
		if err := oprot.WriteFieldBegin("chunkHighUSN", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:chunkHighUSN: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ChunkHighUSN)); err != nil {
			return fmt.Errorf("%T.chunkHighUSN (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:chunkHighUSN: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunk) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateCount", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:updateCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UpdateCount)); err != nil {
		return fmt.Errorf("%T.updateCount (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:updateCount: %s", p, err)
	}
	return err
}

func (p *SyncChunk) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Notes != nil {
		if p.IsSetNotes() {
			if err := oprot.WriteFieldBegin("notes", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:notes: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notes)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Notes {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:notes: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Notebooks != nil {
		if p.IsSetNotebooks() {
			if err := oprot.WriteFieldBegin("notebooks", thrift.LIST, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:notebooks: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notebooks)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Notebooks {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:notebooks: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField6(oprot thrift.TProtocol) (err error) {
	if p.Tags != nil {
		if p.IsSetTags() {
			if err := oprot.WriteFieldBegin("tags", thrift.LIST, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:tags: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tags)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Tags {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:tags: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField7(oprot thrift.TProtocol) (err error) {
	if p.Searches != nil {
		if p.IsSetSearches() {
			if err := oprot.WriteFieldBegin("searches", thrift.LIST, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:searches: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Searches)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Searches {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:searches: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField8(oprot thrift.TProtocol) (err error) {
	if p.Resources != nil {
		if p.IsSetResources() {
			if err := oprot.WriteFieldBegin("resources", thrift.LIST, 8); err != nil {
				return fmt.Errorf("%T write field begin error 8:resources: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Resources)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Resources {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 8:resources: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField9(oprot thrift.TProtocol) (err error) {
	if p.ExpungedNotes != nil {
		if p.IsSetExpungedNotes() {
			if err := oprot.WriteFieldBegin("expungedNotes", thrift.LIST, 9); err != nil {
				return fmt.Errorf("%T write field begin error 9:expungedNotes: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.ExpungedNotes)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ExpungedNotes {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 9:expungedNotes: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField10(oprot thrift.TProtocol) (err error) {
	if p.ExpungedNotebooks != nil {
		if p.IsSetExpungedNotebooks() {
			if err := oprot.WriteFieldBegin("expungedNotebooks", thrift.LIST, 10); err != nil {
				return fmt.Errorf("%T write field begin error 10:expungedNotebooks: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.ExpungedNotebooks)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ExpungedNotebooks {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 10:expungedNotebooks: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField11(oprot thrift.TProtocol) (err error) {
	if p.ExpungedTags != nil {
		if p.IsSetExpungedTags() {
			if err := oprot.WriteFieldBegin("expungedTags", thrift.LIST, 11); err != nil {
				return fmt.Errorf("%T write field begin error 11:expungedTags: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.ExpungedTags)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ExpungedTags {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 11:expungedTags: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField12(oprot thrift.TProtocol) (err error) {
	if p.ExpungedSearches != nil {
		if p.IsSetExpungedSearches() {
			if err := oprot.WriteFieldBegin("expungedSearches", thrift.LIST, 12); err != nil {
				return fmt.Errorf("%T write field begin error 12:expungedSearches: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.ExpungedSearches)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ExpungedSearches {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 12:expungedSearches: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField13(oprot thrift.TProtocol) (err error) {
	if p.LinkedNotebooks != nil {
		if p.IsSetLinkedNotebooks() {
			if err := oprot.WriteFieldBegin("linkedNotebooks", thrift.LIST, 13); err != nil {
				return fmt.Errorf("%T write field begin error 13:linkedNotebooks: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LinkedNotebooks)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.LinkedNotebooks {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 13:linkedNotebooks: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField14(oprot thrift.TProtocol) (err error) {
	if p.ExpungedLinkedNotebooks != nil {
		if p.IsSetExpungedLinkedNotebooks() {
			if err := oprot.WriteFieldBegin("expungedLinkedNotebooks", thrift.LIST, 14); err != nil {
				return fmt.Errorf("%T write field begin error 14:expungedLinkedNotebooks: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.ExpungedLinkedNotebooks)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ExpungedLinkedNotebooks {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 14:expungedLinkedNotebooks: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncChunk(%+v)", *p)
}

type SyncChunkFilter struct {
	IncludeNotes                              bool   `thrift:"includeNotes,1"`
	IncludeNoteResources                      bool   `thrift:"includeNoteResources,2"`
	IncludeNoteAttributes                     bool   `thrift:"includeNoteAttributes,3"`
	IncludeNotebooks                          bool   `thrift:"includeNotebooks,4"`
	IncludeTags                               bool   `thrift:"includeTags,5"`
	IncludeSearches                           bool   `thrift:"includeSearches,6"`
	IncludeResources                          bool   `thrift:"includeResources,7"`
	IncludeLinkedNotebooks                    bool   `thrift:"includeLinkedNotebooks,8"`
	IncludeExpunged                           bool   `thrift:"includeExpunged,9"`
	IncludeNoteApplicationDataFullMap         bool   `thrift:"includeNoteApplicationDataFullMap,10"`
	RequireNoteContentClass                   string `thrift:"requireNoteContentClass,11"`
	IncludeResourceApplicationDataFullMap     bool   `thrift:"includeResourceApplicationDataFullMap,12"`
	IncludeNoteResourceApplicationDataFullMap bool   `thrift:"includeNoteResourceApplicationDataFullMap,13"`
	// unused field # 14
	NotebookGuids       map[string]bool `thrift:"notebookGuids,15"`
	OmitSharedNotebooks bool            `thrift:"omitSharedNotebooks,16"`
	IncludeSharedNotes  bool            `thrift:"includeSharedNotes,17"`
}

func NewSyncChunkFilter() *SyncChunkFilter {
	return &SyncChunkFilter{}
}

func (p *SyncChunkFilter) IsSetIncludeNotes() bool {
	return p.IncludeNotes != false
}

func (p *SyncChunkFilter) IsSetIncludeNoteResources() bool {
	return p.IncludeNoteResources != false
}

func (p *SyncChunkFilter) IsSetIncludeNoteAttributes() bool {
	return p.IncludeNoteAttributes != false
}

func (p *SyncChunkFilter) IsSetIncludeNotebooks() bool {
	return p.IncludeNotebooks != false
}

func (p *SyncChunkFilter) IsSetIncludeTags() bool {
	return p.IncludeTags != false
}

func (p *SyncChunkFilter) IsSetIncludeSearches() bool {
	return p.IncludeSearches != false
}

func (p *SyncChunkFilter) IsSetIncludeResources() bool {
	return p.IncludeResources != false
}

func (p *SyncChunkFilter) IsSetIncludeLinkedNotebooks() bool {
	return p.IncludeLinkedNotebooks != false
}

func (p *SyncChunkFilter) IsSetIncludeExpunged() bool {
	return p.IncludeExpunged != false
}

func (p *SyncChunkFilter) IsSetIncludeNoteApplicationDataFullMap() bool {
	return p.IncludeNoteApplicationDataFullMap != false
}

func (p *SyncChunkFilter) IsSetIncludeResourceApplicationDataFullMap() bool {
	return p.IncludeResourceApplicationDataFullMap != false
}

func (p *SyncChunkFilter) IsSetIncludeNoteResourceApplicationDataFullMap() bool {
	return p.IncludeNoteResourceApplicationDataFullMap != false
}

func (p *SyncChunkFilter) IsSetIncludeSharedNotes() bool {
	return p.IncludeSharedNotes != false
}

func (p *SyncChunkFilter) IsSetOmitSharedNotebooks() bool {
	return p.OmitSharedNotebooks != false
}

func (p *SyncChunkFilter) IsSetRequireNoteContentClass() bool {
	return p.RequireNoteContentClass != ""
}

func (p *SyncChunkFilter) IsSetNotebookGuids() bool {
	return p.NotebookGuids != nil && len(p.NotebookGuids) > 0
}

func (p *SyncChunkFilter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SyncChunkFilter) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.IncludeNotes = v
	}
	return nil
}

func (p *SyncChunkFilter) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.IncludeNoteResources = v
	}
	return nil
}

func (p *SyncChunkFilter) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.IncludeNoteAttributes = v
	}
	return nil
}

func (p *SyncChunkFilter) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.IncludeNotebooks = v
	}
	return nil
}

func (p *SyncChunkFilter) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.IncludeTags = v
	}
	return nil
}

func (p *SyncChunkFilter) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.IncludeSearches = v
	}
	return nil
}

func (p *SyncChunkFilter) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.IncludeResources = v
	}
	return nil
}

func (p *SyncChunkFilter) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.IncludeLinkedNotebooks = v
	}
	return nil
}

func (p *SyncChunkFilter) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.IncludeExpunged = v
	}
	return nil
}

func (p *SyncChunkFilter) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.IncludeNoteApplicationDataFullMap = v
	}
	return nil
}

func (p *SyncChunkFilter) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.IncludeResourceApplicationDataFullMap = v
	}
	return nil
}

func (p *SyncChunkFilter) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 13: %s")
	} else {
		p.IncludeNoteResourceApplicationDataFullMap = v
	}
	return nil
}

func (p *SyncChunkFilter) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 17: %s")
	} else {
		p.IncludeSharedNotes = v
	}
	return nil
}

func (p *SyncChunkFilter) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 16: %s")
	} else {
		p.OmitSharedNotebooks = v
	}
	return nil
}

func (p *SyncChunkFilter) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.RequireNoteContentClass = v
	}
	return nil
}

func (p *SyncChunkFilter) readField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set being: %s")
	}
	p.NotebookGuids = make(map[string]bool, size)
	for i := 0; i < size; i++ {
		var _elem11 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem11 = v
		}
		p.NotebookGuids[_elem11] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s")
	}
	return nil
}

func (p *SyncChunkFilter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncChunkFilter"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SyncChunkFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNotes() {
		if err := oprot.WriteFieldBegin("includeNotes", thrift.BOOL, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:includeNotes: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeNotes)); err != nil {
			return fmt.Errorf("%T.includeNotes (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:includeNotes: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNoteResources() {
		if err := oprot.WriteFieldBegin("includeNoteResources", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:includeNoteResources: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeNoteResources)); err != nil {
			return fmt.Errorf("%T.includeNoteResources (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:includeNoteResources: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNoteAttributes() {
		if err := oprot.WriteFieldBegin("includeNoteAttributes", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:includeNoteAttributes: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeNoteAttributes)); err != nil {
			return fmt.Errorf("%T.includeNoteAttributes (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:includeNoteAttributes: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNotebooks() {
		if err := oprot.WriteFieldBegin("includeNotebooks", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:includeNotebooks: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeNotebooks)); err != nil {
			return fmt.Errorf("%T.includeNotebooks (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:includeNotebooks: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeTags() {
		if err := oprot.WriteFieldBegin("includeTags", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:includeTags: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeTags)); err != nil {
			return fmt.Errorf("%T.includeTags (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:includeTags: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeSearches() {
		if err := oprot.WriteFieldBegin("includeSearches", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:includeSearches: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeSearches)); err != nil {
			return fmt.Errorf("%T.includeSearches (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:includeSearches: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeResources() {
		if err := oprot.WriteFieldBegin("includeResources", thrift.BOOL, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:includeResources: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeResources)); err != nil {
			return fmt.Errorf("%T.includeResources (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:includeResources: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeLinkedNotebooks() {
		if err := oprot.WriteFieldBegin("includeLinkedNotebooks", thrift.BOOL, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:includeLinkedNotebooks: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeLinkedNotebooks)); err != nil {
			return fmt.Errorf("%T.includeLinkedNotebooks (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:includeLinkedNotebooks: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeExpunged() {
		if err := oprot.WriteFieldBegin("includeExpunged", thrift.BOOL, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:includeExpunged: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeExpunged)); err != nil {
			return fmt.Errorf("%T.includeExpunged (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:includeExpunged: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNoteApplicationDataFullMap() {
		if err := oprot.WriteFieldBegin("includeNoteApplicationDataFullMap", thrift.BOOL, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:includeNoteApplicationDataFullMap: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeNoteApplicationDataFullMap)); err != nil {
			return fmt.Errorf("%T.includeNoteApplicationDataFullMap (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:includeNoteApplicationDataFullMap: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequireNoteContentClass() {
		if err := oprot.WriteFieldBegin("requireNoteContentClass", thrift.STRING, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:requireNoteContentClass: %s", p, err)
		}
		if err := oprot.WriteString(string(p.RequireNoteContentClass)); err != nil {
			return fmt.Errorf("%T.requireNoteContentClass (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:requireNoteContentClass: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeResourceApplicationDataFullMap() {
		if err := oprot.WriteFieldBegin("includeResourceApplicationDataFullMap", thrift.BOOL, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:includeResourceApplicationDataFullMap: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeResourceApplicationDataFullMap)); err != nil {
			return fmt.Errorf("%T.includeResourceApplicationDataFullMap (12) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:includeResourceApplicationDataFullMap: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNoteResourceApplicationDataFullMap() {
		if err := oprot.WriteFieldBegin("includeNoteResourceApplicationDataFullMap", thrift.BOOL, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:includeNoteResourceApplicationDataFullMap: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeNoteResourceApplicationDataFullMap)); err != nil {
			return fmt.Errorf("%T.includeNoteResourceApplicationDataFullMap (13) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:includeNoteResourceApplicationDataFullMap: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField15(oprot thrift.TProtocol) (err error) {
	if p.NotebookGuids != nil {
		if p.IsSetNotebookGuids() {
			if err := oprot.WriteFieldBegin("notebookGuids", thrift.SET, 15); err != nil {
				return fmt.Errorf("%T write field begin error 15:notebookGuids: %s", p, err)
			}
			if err := oprot.WriteSetBegin(thrift.STRING, len(p.NotebookGuids)); err != nil {
				return fmt.Errorf("error writing set begin: %s")
			}
			for v, _ := range p.NotebookGuids {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteSetEnd(); err != nil {
				return fmt.Errorf("error writing set end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 15:notebookGuids: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetOmitSharedNotebooks() {
		if err := oprot.WriteFieldBegin("omitSharedNotebooks", thrift.BOOL, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:omitSharedNotebooks: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.OmitSharedNotebooks)); err != nil {
			return fmt.Errorf("%T.omitSharedNotebooks (16) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:omitSharedNotebooks: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeSharedNotes() {
		if err := oprot.WriteFieldBegin("includeSharedNotes", thrift.BOOL, 17); err != nil {
			return fmt.Errorf("%T write field begin error 17:includeSharedNotes: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeSharedNotes)); err != nil {
			return fmt.Errorf("%T.includeSharedNotes (17) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 17:includeSharedNotes: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncChunkFilter(%+v)", *p)
}

type NoteFilter struct {
	Order                       int32       `thrift:"order,1"`
	Ascending                   bool        `thrift:"ascending,2"`
	Words                       string      `thrift:"words,3"`
	NotebookGuid                edam.Guid   `thrift:"notebookGuid,4"`
	TagGuids                    []edam.Guid `thrift:"tagGuids,5"`
	TimeZone                    string      `thrift:"timeZone,6"`
	Inactive                    bool        `thrift:"inactive,7"`
	Emphasized                  string      `thrift:"emphasized,8"`
	IncludeAllReadableNotebooks bool        `thrift:"includeAllReadableNotebooks,9"`
	Context                     string      `thrift:"context,10"`
}

func NewNoteFilter() *NoteFilter {
	return &NoteFilter{}
}

func (p *NoteFilter) IsSetOrder() bool {
	return p.Order != 0
}

func (p *NoteFilter) IsSetAscending() bool {
	return p.Ascending != false
}

func (p *NoteFilter) IsSetWords() bool {
	return p.Words != ""
}

func (p *NoteFilter) IsSetNotebookGuid() bool {
	return p.NotebookGuid != ""
}

func (p *NoteFilter) IsSetTagGuids() bool {
	return p.TagGuids != nil && len(p.TagGuids) > 0
}

func (p *NoteFilter) IsSetTimeZone() bool {
	return p.TimeZone != ""
}

func (p *NoteFilter) IsSetInactive() bool {
	return p.Inactive != false
}

func (p *NoteFilter) IsSetEmphasized() bool {
	return p.Emphasized != ""
}

func (p *NoteFilter) IsSetIncludeAllReadableNotebooks() bool {
	return p.IncludeAllReadableNotebooks != false
}

func (p *NoteFilter) IsSetContext() bool {
	return p.Context != ""
}

func (p *NoteFilter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteFilter) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Order = v
	}
	return nil
}

func (p *NoteFilter) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Ascending = v
	}
	return nil
}

func (p *NoteFilter) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Words = v
	}
	return nil
}

func (p *NoteFilter) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.NotebookGuid = edam.Guid(v)
	}
	return nil
}

func (p *NoteFilter) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.TagGuids = make([]edam.Guid, 0, size)
	for i := 0; i < size; i++ {
		var _elem12 edam.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem12 = edam.Guid(v)
		}
		p.TagGuids = append(p.TagGuids, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NoteFilter) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.TimeZone = v
	}
	return nil
}

func (p *NoteFilter) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Inactive = v
	}
	return nil
}

func (p *NoteFilter) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Emphasized = v
	}
	return nil
}

func (p *NoteFilter) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.IncludeAllReadableNotebooks = v
	}
	return nil
}

func (p *NoteFilter) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.Context = v
	}
	return nil
}

func (p *NoteFilter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteFilter"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrder() {
		if err := oprot.WriteFieldBegin("order", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:order: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Order)); err != nil {
			return fmt.Errorf("%T.order (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:order: %s", p, err)
		}
	}
	return err
}

func (p *NoteFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAscending() {
		if err := oprot.WriteFieldBegin("ascending", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:ascending: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Ascending)); err != nil {
			return fmt.Errorf("%T.ascending (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:ascending: %s", p, err)
		}
	}
	return err
}

func (p *NoteFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWords() {
		if err := oprot.WriteFieldBegin("words", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:words: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Words)); err != nil {
			return fmt.Errorf("%T.words (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:words: %s", p, err)
		}
	}
	return err
}

func (p *NoteFilter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookGuid() {
		if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:notebookGuid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.NotebookGuid)); err != nil {
			return fmt.Errorf("%T.notebookGuid (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:notebookGuid: %s", p, err)
		}
	}
	return err
}

func (p *NoteFilter) writeField5(oprot thrift.TProtocol) (err error) {
	if p.TagGuids != nil {
		if p.IsSetTagGuids() {
			if err := oprot.WriteFieldBegin("tagGuids", thrift.LIST, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:tagGuids: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.TagGuids)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.TagGuids {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:tagGuids: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteFilter) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeZone() {
		if err := oprot.WriteFieldBegin("timeZone", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:timeZone: %s", p, err)
		}
		if err := oprot.WriteString(string(p.TimeZone)); err != nil {
			return fmt.Errorf("%T.timeZone (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:timeZone: %s", p, err)
		}
	}
	return err
}

func (p *NoteFilter) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetInactive() {
		if err := oprot.WriteFieldBegin("inactive", thrift.BOOL, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:inactive: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Inactive)); err != nil {
			return fmt.Errorf("%T.inactive (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:inactive: %s", p, err)
		}
	}
	return err
}

func (p *NoteFilter) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmphasized() {
		if err := oprot.WriteFieldBegin("emphasized", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:emphasized: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Emphasized)); err != nil {
			return fmt.Errorf("%T.emphasized (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:emphasized: %s", p, err)
		}
	}
	return err
}

func (p *NoteFilter) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeAllReadableNotebooks() {
		if err := oprot.WriteFieldBegin("includeAllReadableNotebooks", thrift.BOOL, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:includeAllReadableNotebooks: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeAllReadableNotebooks)); err != nil {
			return fmt.Errorf("%T.includeAllReadableNotebooks (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:includeAllReadableNotebooks: %s", p, err)
		}
	}
	return err
}

func (p *NoteFilter) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetContext() {
		if err := oprot.WriteFieldBegin("context", thrift.STRING, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:context: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Context)); err != nil {
			return fmt.Errorf("%T.context (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:context: %s", p, err)
		}
	}
	return err
}

func (p *NoteFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteFilter(%+v)", *p)
}

type NoteList struct {
	StartIndex    int32        `thrift:"startIndex,1,required"`
	TotalNotes    int32        `thrift:"totalNotes,2,required"`
	Notes         []*edam.Note `thrift:"notes,3,required"`
	StoppedWords  []string     `thrift:"stoppedWords,4"`
	SearchedWords []string     `thrift:"searchedWords,5"`
	UpdateCount   int32        `thrift:"updateCount,6"`
}

func NewNoteList() *NoteList {
	return &NoteList{}
}

func (p *NoteList) IsSetStoppedWords() bool {
	return p.StoppedWords != nil && len(p.StoppedWords) > 0
}

func (p *NoteList) IsSetSearchedWords() bool {
	return p.SearchedWords != nil && len(p.SearchedWords) > 0
}

func (p *NoteList) IsSetUpdateCount() bool {
	return p.UpdateCount != 0
}

func (p *NoteList) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteList) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *NoteList) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TotalNotes = v
	}
	return nil
}

func (p *NoteList) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Notes = make([]*edam.Note, 0, size)
	for i := 0; i < size; i++ {
		_elem13 := edam.NewNote()
		if err := _elem13.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem13)
		}
		p.Notes = append(p.Notes, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NoteList) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.StoppedWords = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem14 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem14 = v
		}
		p.StoppedWords = append(p.StoppedWords, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NoteList) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.SearchedWords = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem15 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem15 = v
		}
		p.SearchedWords = append(p.SearchedWords, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NoteList) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.UpdateCount = v
	}
	return nil
}

func (p *NoteList) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteList"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteList) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startIndex", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:startIndex: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
		return fmt.Errorf("%T.startIndex (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:startIndex: %s", p, err)
	}
	return err
}

func (p *NoteList) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalNotes", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:totalNotes: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TotalNotes)); err != nil {
		return fmt.Errorf("%T.totalNotes (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:totalNotes: %s", p, err)
	}
	return err
}

func (p *NoteList) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Notes != nil {
		if err := oprot.WriteFieldBegin("notes", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notes: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notes)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Notes {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notes: %s", p, err)
		}
	}
	return err
}

func (p *NoteList) writeField4(oprot thrift.TProtocol) (err error) {
	if p.StoppedWords != nil {
		if p.IsSetStoppedWords() {
			if err := oprot.WriteFieldBegin("stoppedWords", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:stoppedWords: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.StoppedWords)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.StoppedWords {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:stoppedWords: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteList) writeField5(oprot thrift.TProtocol) (err error) {
	if p.SearchedWords != nil {
		if p.IsSetSearchedWords() {
			if err := oprot.WriteFieldBegin("searchedWords", thrift.LIST, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:searchedWords: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.SearchedWords)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.SearchedWords {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:searchedWords: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteList) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateCount() {
		if err := oprot.WriteFieldBegin("updateCount", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:updateCount: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UpdateCount)); err != nil {
			return fmt.Errorf("%T.updateCount (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:updateCount: %s", p, err)
		}
	}
	return err
}

func (p *NoteList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteList(%+v)", *p)
}

type NoteMetadata struct {
	Guid  edam.Guid `thrift:"guid,1,required"`
	Title string    `thrift:"title,2"`
	// unused field # 3
	// unused field # 4
	ContentLength int32          `thrift:"contentLength,5"`
	Created       edam.Timestamp `thrift:"created,6"`
	Updated       edam.Timestamp `thrift:"updated,7"`
	Deleted       edam.Timestamp `thrift:"deleted,8"`
	// unused field # 9
	UpdateSequenceNum int32       `thrift:"updateSequenceNum,10"`
	NotebookGuid      string      `thrift:"notebookGuid,11"`
	TagGuids          []edam.Guid `thrift:"tagGuids,12"`
	// unused field # 13
	Attributes *edam.NoteAttributes `thrift:"attributes,14"`
	// unused field # 15
	// unused field # 16
	// unused field # 17
	// unused field # 18
	// unused field # 19
	LargestResourceMime string `thrift:"largestResourceMime,20"`
	LargestResourceSize int32  `thrift:"largestResourceSize,21"`
}

func NewNoteMetadata() *NoteMetadata {
	return &NoteMetadata{}
}

func (p *NoteMetadata) IsSetTitle() bool {
	return p.Title != ""
}

func (p *NoteMetadata) IsSetContentLength() bool {
	return p.ContentLength != 0
}

func (p *NoteMetadata) IsSetCreated() bool {
	return p.Created != 0
}

func (p *NoteMetadata) IsSetUpdated() bool {
	return p.Updated != 0
}

func (p *NoteMetadata) IsSetDeleted() bool {
	return p.Deleted != 0
}

func (p *NoteMetadata) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != 0
}

func (p *NoteMetadata) IsSetNotebookGuid() bool {
	return p.NotebookGuid != ""
}

func (p *NoteMetadata) IsSetTagGuids() bool {
	return p.TagGuids != nil && len(p.TagGuids) > 0
}

func (p *NoteMetadata) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *NoteMetadata) IsSetLargestResourceMime() bool {
	return p.LargestResourceMime != ""
}

func (p *NoteMetadata) IsSetLargestResourceSize() bool {
	return p.LargestResourceSize != 0
}

func (p *NoteMetadata) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteMetadata) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Guid = edam.Guid(v)
	}
	return nil
}

func (p *NoteMetadata) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Title = v
	}
	return nil
}

func (p *NoteMetadata) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.ContentLength = v
	}
	return nil
}

func (p *NoteMetadata) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Created = edam.Timestamp(v)
	}
	return nil
}

func (p *NoteMetadata) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Updated = edam.Timestamp(v)
	}
	return nil
}

func (p *NoteMetadata) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Deleted = edam.Timestamp(v)
	}
	return nil
}

func (p *NoteMetadata) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.UpdateSequenceNum = v
	}
	return nil
}

func (p *NoteMetadata) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.NotebookGuid = v
	}
	return nil
}

func (p *NoteMetadata) readField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.TagGuids = make([]edam.Guid, 0, size)
	for i := 0; i < size; i++ {
		var _elem16 edam.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem16 = edam.Guid(v)
		}
		p.TagGuids = append(p.TagGuids, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NoteMetadata) readField14(iprot thrift.TProtocol) error {
	p.Attributes = edam.NewNoteAttributes()
	if err := p.Attributes.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Attributes)
	}
	return nil
}

func (p *NoteMetadata) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 20: %s")
	} else {
		p.LargestResourceMime = v
	}
	return nil
}

func (p *NoteMetadata) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 21: %s")
	} else {
		p.LargestResourceSize = v
	}
	return nil
}

func (p *NoteMetadata) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteMetadata"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:guid: %s", p, err)
	}
	return err
}

func (p *NoteMetadata) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:title: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Title)); err != nil {
			return fmt.Errorf("%T.title (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:title: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentLength() {
		if err := oprot.WriteFieldBegin("contentLength", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:contentLength: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ContentLength)); err != nil {
			return fmt.Errorf("%T.contentLength (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:contentLength: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreated() {
		if err := oprot.WriteFieldBegin("created", thrift.I64, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:created: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Created)); err != nil {
			return fmt.Errorf("%T.created (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:created: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdated() {
		if err := oprot.WriteFieldBegin("updated", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:updated: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Updated)); err != nil {
			return fmt.Errorf("%T.updated (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:updated: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleted() {
		if err := oprot.WriteFieldBegin("deleted", thrift.I64, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:deleted: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Deleted)); err != nil {
			return fmt.Errorf("%T.deleted (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:deleted: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:updateSequenceNum: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UpdateSequenceNum)); err != nil {
			return fmt.Errorf("%T.updateSequenceNum (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:updateSequenceNum: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookGuid() {
		if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:notebookGuid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.NotebookGuid)); err != nil {
			return fmt.Errorf("%T.notebookGuid (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:notebookGuid: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField12(oprot thrift.TProtocol) (err error) {
	if p.TagGuids != nil {
		if p.IsSetTagGuids() {
			if err := oprot.WriteFieldBegin("tagGuids", thrift.LIST, 12); err != nil {
				return fmt.Errorf("%T write field begin error 12:tagGuids: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.TagGuids)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.TagGuids {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 12:tagGuids: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteMetadata) writeField14(oprot thrift.TProtocol) (err error) {
	if p.Attributes != nil {
		if p.IsSetAttributes() {
			if err := oprot.WriteFieldBegin("attributes", thrift.STRUCT, 14); err != nil {
				return fmt.Errorf("%T write field begin error 14:attributes: %s", p, err)
			}
			if err := p.Attributes.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Attributes)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 14:attributes: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteMetadata) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetLargestResourceMime() {
		if err := oprot.WriteFieldBegin("largestResourceMime", thrift.STRING, 20); err != nil {
			return fmt.Errorf("%T write field begin error 20:largestResourceMime: %s", p, err)
		}
		if err := oprot.WriteString(string(p.LargestResourceMime)); err != nil {
			return fmt.Errorf("%T.largestResourceMime (20) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 20:largestResourceMime: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetLargestResourceSize() {
		if err := oprot.WriteFieldBegin("largestResourceSize", thrift.I32, 21); err != nil {
			return fmt.Errorf("%T write field begin error 21:largestResourceSize: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.LargestResourceSize)); err != nil {
			return fmt.Errorf("%T.largestResourceSize (21) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 21:largestResourceSize: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteMetadata(%+v)", *p)
}

type NotesMetadataList struct {
	StartIndex    int32           `thrift:"startIndex,1,required"`
	TotalNotes    int32           `thrift:"totalNotes,2,required"`
	Notes         []*NoteMetadata `thrift:"notes,3,required"`
	StoppedWords  []string        `thrift:"stoppedWords,4"`
	SearchedWords []string        `thrift:"searchedWords,5"`
	UpdateCount   int32           `thrift:"updateCount,6"`
}

func NewNotesMetadataList() *NotesMetadataList {
	return &NotesMetadataList{}
}

func (p *NotesMetadataList) IsSetStoppedWords() bool {
	return p.StoppedWords != nil && len(p.StoppedWords) > 0
}

func (p *NotesMetadataList) IsSetSearchedWords() bool {
	return p.SearchedWords != nil && len(p.SearchedWords) > 0
}

func (p *NotesMetadataList) IsSetUpdateCount() bool {
	return p.UpdateCount != 0
}

func (p *NotesMetadataList) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotesMetadataList) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *NotesMetadataList) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TotalNotes = v
	}
	return nil
}

func (p *NotesMetadataList) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Notes = make([]*NoteMetadata, 0, size)
	for i := 0; i < size; i++ {
		_elem17 := NewNoteMetadata()
		if err := _elem17.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem17)
		}
		p.Notes = append(p.Notes, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NotesMetadataList) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.StoppedWords = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem18 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem18 = v
		}
		p.StoppedWords = append(p.StoppedWords, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NotesMetadataList) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.SearchedWords = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem19 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem19 = v
		}
		p.SearchedWords = append(p.SearchedWords, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NotesMetadataList) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.UpdateCount = v
	}
	return nil
}

func (p *NotesMetadataList) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NotesMetadataList"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NotesMetadataList) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startIndex", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:startIndex: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
		return fmt.Errorf("%T.startIndex (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:startIndex: %s", p, err)
	}
	return err
}

func (p *NotesMetadataList) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalNotes", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:totalNotes: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TotalNotes)); err != nil {
		return fmt.Errorf("%T.totalNotes (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:totalNotes: %s", p, err)
	}
	return err
}

func (p *NotesMetadataList) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Notes != nil {
		if err := oprot.WriteFieldBegin("notes", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notes: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notes)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Notes {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notes: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataList) writeField4(oprot thrift.TProtocol) (err error) {
	if p.StoppedWords != nil {
		if p.IsSetStoppedWords() {
			if err := oprot.WriteFieldBegin("stoppedWords", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:stoppedWords: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.StoppedWords)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.StoppedWords {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:stoppedWords: %s", p, err)
			}
		}
	}
	return err
}

func (p *NotesMetadataList) writeField5(oprot thrift.TProtocol) (err error) {
	if p.SearchedWords != nil {
		if p.IsSetSearchedWords() {
			if err := oprot.WriteFieldBegin("searchedWords", thrift.LIST, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:searchedWords: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.SearchedWords)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.SearchedWords {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:searchedWords: %s", p, err)
			}
		}
	}
	return err
}

func (p *NotesMetadataList) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateCount() {
		if err := oprot.WriteFieldBegin("updateCount", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:updateCount: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UpdateCount)); err != nil {
			return fmt.Errorf("%T.updateCount (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:updateCount: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotesMetadataList(%+v)", *p)
}

type NotesMetadataResultSpec struct {
	// unused field # 1
	IncludeTitle bool `thrift:"includeTitle,2"`
	// unused field # 3
	// unused field # 4
	IncludeContentLength bool `thrift:"includeContentLength,5"`
	IncludeCreated       bool `thrift:"includeCreated,6"`
	IncludeUpdated       bool `thrift:"includeUpdated,7"`
	IncludeDeleted       bool `thrift:"includeDeleted,8"`
	// unused field # 9
	IncludeUpdateSequenceNum bool `thrift:"includeUpdateSequenceNum,10"`
	IncludeNotebookGuid      bool `thrift:"includeNotebookGuid,11"`
	IncludeTagGuids          bool `thrift:"includeTagGuids,12"`
	// unused field # 13
	IncludeAttributes bool `thrift:"includeAttributes,14"`
	// unused field # 15
	// unused field # 16
	// unused field # 17
	// unused field # 18
	// unused field # 19
	IncludeLargestResourceMime bool `thrift:"includeLargestResourceMime,20"`
	IncludeLargestResourceSize bool `thrift:"includeLargestResourceSize,21"`
}

func NewNotesMetadataResultSpec() *NotesMetadataResultSpec {
	return &NotesMetadataResultSpec{}
}

func (p *NotesMetadataResultSpec) IsSetIncludeTitle() bool {
	return p.IncludeTitle != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeContentLength() bool {
	return p.IncludeContentLength != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeCreated() bool {
	return p.IncludeCreated != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeUpdated() bool {
	return p.IncludeUpdated != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeDeleted() bool {
	return p.IncludeDeleted != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeUpdateSequenceNum() bool {
	return p.IncludeUpdateSequenceNum != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeNotebookGuid() bool {
	return p.IncludeNotebookGuid != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeTagGuids() bool {
	return p.IncludeTagGuids != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeAttributes() bool {
	return p.IncludeAttributes != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeLargestResourceMime() bool {
	return p.IncludeLargestResourceMime != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeLargestResourceSize() bool {
	return p.IncludeLargestResourceSize != false
}

func (p *NotesMetadataResultSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.IncludeTitle = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.IncludeContentLength = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.IncludeCreated = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.IncludeUpdated = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.IncludeDeleted = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.IncludeUpdateSequenceNum = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.IncludeNotebookGuid = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.IncludeTagGuids = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 14: %s")
	} else {
		p.IncludeAttributes = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 20: %s")
	} else {
		p.IncludeLargestResourceMime = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 21: %s")
	} else {
		p.IncludeLargestResourceSize = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NotesMetadataResultSpec"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NotesMetadataResultSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeTitle() {
		if err := oprot.WriteFieldBegin("includeTitle", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:includeTitle: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeTitle)); err != nil {
			return fmt.Errorf("%T.includeTitle (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:includeTitle: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeContentLength() {
		if err := oprot.WriteFieldBegin("includeContentLength", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:includeContentLength: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeContentLength)); err != nil {
			return fmt.Errorf("%T.includeContentLength (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:includeContentLength: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeCreated() {
		if err := oprot.WriteFieldBegin("includeCreated", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:includeCreated: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeCreated)); err != nil {
			return fmt.Errorf("%T.includeCreated (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:includeCreated: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeUpdated() {
		if err := oprot.WriteFieldBegin("includeUpdated", thrift.BOOL, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:includeUpdated: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeUpdated)); err != nil {
			return fmt.Errorf("%T.includeUpdated (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:includeUpdated: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeDeleted() {
		if err := oprot.WriteFieldBegin("includeDeleted", thrift.BOOL, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:includeDeleted: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeDeleted)); err != nil {
			return fmt.Errorf("%T.includeDeleted (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:includeDeleted: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("includeUpdateSequenceNum", thrift.BOOL, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:includeUpdateSequenceNum: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeUpdateSequenceNum)); err != nil {
			return fmt.Errorf("%T.includeUpdateSequenceNum (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:includeUpdateSequenceNum: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNotebookGuid() {
		if err := oprot.WriteFieldBegin("includeNotebookGuid", thrift.BOOL, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:includeNotebookGuid: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeNotebookGuid)); err != nil {
			return fmt.Errorf("%T.includeNotebookGuid (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:includeNotebookGuid: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeTagGuids() {
		if err := oprot.WriteFieldBegin("includeTagGuids", thrift.BOOL, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:includeTagGuids: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeTagGuids)); err != nil {
			return fmt.Errorf("%T.includeTagGuids (12) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:includeTagGuids: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeAttributes() {
		if err := oprot.WriteFieldBegin("includeAttributes", thrift.BOOL, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:includeAttributes: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeAttributes)); err != nil {
			return fmt.Errorf("%T.includeAttributes (14) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:includeAttributes: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeLargestResourceMime() {
		if err := oprot.WriteFieldBegin("includeLargestResourceMime", thrift.BOOL, 20); err != nil {
			return fmt.Errorf("%T write field begin error 20:includeLargestResourceMime: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeLargestResourceMime)); err != nil {
			return fmt.Errorf("%T.includeLargestResourceMime (20) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 20:includeLargestResourceMime: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeLargestResourceSize() {
		if err := oprot.WriteFieldBegin("includeLargestResourceSize", thrift.BOOL, 21); err != nil {
			return fmt.Errorf("%T write field begin error 21:includeLargestResourceSize: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeLargestResourceSize)); err != nil {
			return fmt.Errorf("%T.includeLargestResourceSize (21) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 21:includeLargestResourceSize: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotesMetadataResultSpec(%+v)", *p)
}

type NoteCollectionCounts struct {
	NotebookCounts map[edam.Guid]int32 `thrift:"notebookCounts,1"`
	TagCounts      map[edam.Guid]int32 `thrift:"tagCounts,2"`
	TrashCount     int32               `thrift:"trashCount,3"`
}

func NewNoteCollectionCounts() *NoteCollectionCounts {
	return &NoteCollectionCounts{}
}

func (p *NoteCollectionCounts) IsSetNotebookCounts() bool {
	return p.NotebookCounts != nil && len(p.NotebookCounts) > 0
}

func (p *NoteCollectionCounts) IsSetTagCounts() bool {
	return p.TagCounts != nil && len(p.TagCounts) > 0
}

func (p *NoteCollectionCounts) IsSetTrashCount() bool {
	return p.TrashCount != 0
}

func (p *NoteCollectionCounts) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteCollectionCounts) readField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.NotebookCounts = make(map[edam.Guid]int32, size)
	for i := 0; i < size; i++ {
		var _key20 edam.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key20 = edam.Guid(v)
		}
		var _val21 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val21 = v
		}
		p.NotebookCounts[_key20] = _val21
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *NoteCollectionCounts) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.TagCounts = make(map[edam.Guid]int32, size)
	for i := 0; i < size; i++ {
		var _key22 edam.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key22 = edam.Guid(v)
		}
		var _val23 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val23 = v
		}
		p.TagCounts[_key22] = _val23
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *NoteCollectionCounts) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.TrashCount = v
	}
	return nil
}

func (p *NoteCollectionCounts) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteCollectionCounts"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteCollectionCounts) writeField1(oprot thrift.TProtocol) (err error) {
	if p.NotebookCounts != nil {
		if p.IsSetNotebookCounts() {
			if err := oprot.WriteFieldBegin("notebookCounts", thrift.MAP, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:notebookCounts: %s", p, err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.NotebookCounts)); err != nil {
				return fmt.Errorf("error writing map begin: %s")
			}
			for k, v := range p.NotebookCounts {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
				if err := oprot.WriteI32(int32(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:notebookCounts: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteCollectionCounts) writeField2(oprot thrift.TProtocol) (err error) {
	if p.TagCounts != nil {
		if p.IsSetTagCounts() {
			if err := oprot.WriteFieldBegin("tagCounts", thrift.MAP, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:tagCounts: %s", p, err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.TagCounts)); err != nil {
				return fmt.Errorf("error writing map begin: %s")
			}
			for k, v := range p.TagCounts {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
				if err := oprot.WriteI32(int32(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:tagCounts: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteCollectionCounts) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrashCount() {
		if err := oprot.WriteFieldBegin("trashCount", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:trashCount: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.TrashCount)); err != nil {
			return fmt.Errorf("%T.trashCount (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:trashCount: %s", p, err)
		}
	}
	return err
}

func (p *NoteCollectionCounts) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteCollectionCounts(%+v)", *p)
}

type NoteResultSpec struct {
	IncludeContent                bool `thrift:"includeContent,1"`
	IncludeResourcesData          bool `thrift:"includeResourcesData,2"`
	IncludeResourcesRecognition   bool `thrift:"includeResourcesRecognition,3"`
	IncludeResourcesAlternateData bool `thrift:"includeResourcesAlternateData,4"`
	IncludeSharedNotes            bool `thrift:"includeSharedNotes,5"`
	IncludeNoteAppDataValues      bool `thrift:"includeNoteAppDataValues,6"`
	IncludeResourceAppDataValues  bool `thrift:"includeResourceAppDataValues,7"`
	IncludeAccountLimits          bool `thrift:"includeAccountLimits,8"`
}

func NewNoteResultSpec() *NoteResultSpec {
	return &NoteResultSpec{}
}

func (p *NoteResultSpec) IsSetIncludeContent() bool {
	return p.IncludeContent != false
}

func (p *NoteResultSpec) IsSetIncludeResourcesData() bool {
	return p.IncludeResourcesData != false
}

func (p *NoteResultSpec) IsSetIncludeResourcesRecognition() bool {
	return p.IncludeResourcesRecognition != false
}

func (p *NoteResultSpec) IsSetIncludeResourcesAlternateData() bool {
	return p.IncludeResourcesAlternateData != false
}

func (p *NoteResultSpec) IsSetIncludeSharedNotes() bool {
	return p.IncludeSharedNotes != false
}

func (p *NoteResultSpec) IsSetIncludeNoteAppDataValues() bool {
	return p.IncludeNoteAppDataValues != false
}

func (p *NoteResultSpec) IsSetIncludeResourceAppDataValues() bool {
	return p.IncludeResourceAppDataValues != false
}

func (p *NoteResultSpec) IsSetIncludeAccountLimits() bool {
	return p.IncludeAccountLimits != false
}

func (p *NoteResultSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteResultSpec) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.IncludeContent = v
	}
	return nil
}

func (p *NoteResultSpec) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.IncludeResourcesData = v
	}
	return nil
}

func (p *NoteResultSpec) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.IncludeResourcesRecognition = v
	}
	return nil
}

func (p *NoteResultSpec) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.IncludeResourcesAlternateData = v
	}
	return nil
}

func (p *NoteResultSpec) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.IncludeSharedNotes = v
	}
	return nil
}

func (p *NoteResultSpec) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.IncludeNoteAppDataValues = v
	}
	return nil
}

func (p *NoteResultSpec) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.IncludeResourceAppDataValues = v
	}
	return nil
}

func (p *NoteResultSpec) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.IncludeAccountLimits = v
	}
	return nil
}

func (p *NoteResultSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteResultSpec"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteResultSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeContent() {
		if err := oprot.WriteFieldBegin("includeContent", thrift.BOOL, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:includeContent: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeContent)); err != nil {
			return fmt.Errorf("%T.includeContent (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:includeContent: %s", p, err)
		}
	}
	return err
}

func (p *NoteResultSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeResourcesData() {
		if err := oprot.WriteFieldBegin("includeResourcesData", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:includeResourcesData: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeResourcesData)); err != nil {
			return fmt.Errorf("%T.includeResourcesData (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:includeResourcesData: %s", p, err)
		}
	}
	return err
}

func (p *NoteResultSpec) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeResourcesRecognition() {
		if err := oprot.WriteFieldBegin("includeResourcesRecognition", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:includeResourcesRecognition: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeResourcesRecognition)); err != nil {
			return fmt.Errorf("%T.includeResourcesRecognition (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:includeResourcesRecognition: %s", p, err)
		}
	}
	return err
}

func (p *NoteResultSpec) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeResourcesAlternateData() {
		if err := oprot.WriteFieldBegin("includeResourcesAlternateData", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:includeResourcesAlternateData: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeResourcesAlternateData)); err != nil {
			return fmt.Errorf("%T.includeResourcesAlternateData (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:includeResourcesAlternateData: %s", p, err)
		}
	}
	return err
}

func (p *NoteResultSpec) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeSharedNotes() {
		if err := oprot.WriteFieldBegin("includeSharedNotes", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:includeSharedNotes: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeSharedNotes)); err != nil {
			return fmt.Errorf("%T.includeSharedNotes (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:includeSharedNotes: %s", p, err)
		}
	}
	return err
}

func (p *NoteResultSpec) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNoteAppDataValues() {
		if err := oprot.WriteFieldBegin("includeNoteAppDataValues", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:includeNoteAppDataValues: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeNoteAppDataValues)); err != nil {
			return fmt.Errorf("%T.includeNoteAppDataValues (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:includeNoteAppDataValues: %s", p, err)
		}
	}
	return err
}

func (p *NoteResultSpec) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeResourceAppDataValues() {
		if err := oprot.WriteFieldBegin("includeResourceAppDataValues", thrift.BOOL, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:includeResourceAppDataValues: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeResourceAppDataValues)); err != nil {
			return fmt.Errorf("%T.includeResourceAppDataValues (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:includeResourceAppDataValues: %s", p, err)
		}
	}
	return err
}

func (p *NoteResultSpec) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeAccountLimits() {
		if err := oprot.WriteFieldBegin("includeAccountLimits", thrift.BOOL, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:includeAccountLimits: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeAccountLimits)); err != nil {
			return fmt.Errorf("%T.includeAccountLimits (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:includeAccountLimits: %s", p, err)
		}
	}
	return err
}

func (p *NoteResultSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteResultSpec(%+v)", *p)
}

type NoteEmailParameters struct {
	Guid        string     `thrift:"guid,1"`
	Note        *edam.Note `thrift:"note,2"`
	ToAddresses []string   `thrift:"toAddresses,3"`
	CcAddresses []string   `thrift:"ccAddresses,4"`
	Subject     string     `thrift:"subject,5"`
	Message     string     `thrift:"message,6"`
}

func NewNoteEmailParameters() *NoteEmailParameters {
	return &NoteEmailParameters{}
}

func (p *NoteEmailParameters) IsSetGuid() bool {
	return p.Guid != ""
}

func (p *NoteEmailParameters) IsSetNote() bool {
	return p.Note != nil
}

func (p *NoteEmailParameters) IsSetToAddresses() bool {
	return p.ToAddresses != nil && len(p.ToAddresses) > 0
}

func (p *NoteEmailParameters) IsSetCcAddresses() bool {
	return p.CcAddresses != nil && len(p.CcAddresses) > 0
}

func (p *NoteEmailParameters) IsSetSubject() bool {
	return p.Subject != ""
}

func (p *NoteEmailParameters) IsSetMessage() bool {
	return p.Message != ""
}

func (p *NoteEmailParameters) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteEmailParameters) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Guid = v
	}
	return nil
}

func (p *NoteEmailParameters) readField2(iprot thrift.TProtocol) error {
	p.Note = edam.NewNote()
	if err := p.Note.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Note)
	}
	return nil
}

func (p *NoteEmailParameters) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ToAddresses = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem24 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem24 = v
		}
		p.ToAddresses = append(p.ToAddresses, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NoteEmailParameters) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.CcAddresses = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem25 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem25 = v
		}
		p.CcAddresses = append(p.CcAddresses, _elem25)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NoteEmailParameters) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Subject = v
	}
	return nil
}

func (p *NoteEmailParameters) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Message = v
	}
	return nil
}

func (p *NoteEmailParameters) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteEmailParameters"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteEmailParameters) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGuid() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:guid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Guid)); err != nil {
			return fmt.Errorf("%T.guid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:guid: %s", p, err)
		}
	}
	return err
}

func (p *NoteEmailParameters) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Note != nil {
		if p.IsSetNote() {
			if err := oprot.WriteFieldBegin("note", thrift.STRUCT, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:note: %s", p, err)
			}
			if err := p.Note.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Note)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:note: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteEmailParameters) writeField3(oprot thrift.TProtocol) (err error) {
	if p.ToAddresses != nil {
		if p.IsSetToAddresses() {
			if err := oprot.WriteFieldBegin("toAddresses", thrift.LIST, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:toAddresses: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.ToAddresses)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ToAddresses {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:toAddresses: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteEmailParameters) writeField4(oprot thrift.TProtocol) (err error) {
	if p.CcAddresses != nil {
		if p.IsSetCcAddresses() {
			if err := oprot.WriteFieldBegin("ccAddresses", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:ccAddresses: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.CcAddresses)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.CcAddresses {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:ccAddresses: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteEmailParameters) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubject() {
		if err := oprot.WriteFieldBegin("subject", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:subject: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Subject)); err != nil {
			return fmt.Errorf("%T.subject (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:subject: %s", p, err)
		}
	}
	return err
}

func (p *NoteEmailParameters) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:message: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Message)); err != nil {
			return fmt.Errorf("%T.message (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:message: %s", p, err)
		}
	}
	return err
}

func (p *NoteEmailParameters) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteEmailParameters(%+v)", *p)
}

type NoteVersionId struct {
	UpdateSequenceNum int32          `thrift:"updateSequenceNum,1,required"`
	Updated           edam.Timestamp `thrift:"updated,2,required"`
	Saved             edam.Timestamp `thrift:"saved,3,required"`
	Title             string         `thrift:"title,4,required"`
	LastEditorId      edam.UserID    `thrift:"lastEditorId,5"`
}

func NewNoteVersionId() *NoteVersionId {
	return &NoteVersionId{}
}

func (p *NoteVersionId) IsSetLastEditorId() bool {
	return p.LastEditorId != 0
}

func (p *NoteVersionId) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteVersionId) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.UpdateSequenceNum = v
	}
	return nil
}

func (p *NoteVersionId) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Updated = edam.Timestamp(v)
	}
	return nil
}

func (p *NoteVersionId) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Saved = edam.Timestamp(v)
	}
	return nil
}

func (p *NoteVersionId) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Title = v
	}
	return nil
}

func (p *NoteVersionId) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.LastEditorId = edam.UserID(v)
	}
	return nil
}

func (p *NoteVersionId) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteVersionId"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteVersionId) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:updateSequenceNum: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UpdateSequenceNum)); err != nil {
		return fmt.Errorf("%T.updateSequenceNum (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:updateSequenceNum: %s", p, err)
	}
	return err
}

func (p *NoteVersionId) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updated", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:updated: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Updated)); err != nil {
		return fmt.Errorf("%T.updated (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:updated: %s", p, err)
	}
	return err
}

func (p *NoteVersionId) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("saved", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:saved: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Saved)); err != nil {
		return fmt.Errorf("%T.saved (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:saved: %s", p, err)
	}
	return err
}

func (p *NoteVersionId) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:title: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return fmt.Errorf("%T.title (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:title: %s", p, err)
	}
	return err
}

func (p *NoteVersionId) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastEditorId() {
		if err := oprot.WriteFieldBegin("lastEditorId", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:lastEditorId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.LastEditorId)); err != nil {
			return fmt.Errorf("%T.lastEditorId (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:lastEditorId: %s", p, err)
		}
	}
	return err
}

func (p *NoteVersionId) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteVersionId(%+v)", *p)
}

type RelatedQuery struct {
	NoteGuid     string      `thrift:"noteGuid,1"`
	PlainText    string      `thrift:"plainText,2"`
	Filter       *NoteFilter `thrift:"filter,3"`
	ReferenceUri string      `thrift:"referenceUri,4"`
	Context      string      `thrift:"context,5"`
	CacheKey     string      `thrift:"cacheKey,6"`
}

func NewRelatedQuery() *RelatedQuery {
	return &RelatedQuery{}
}

func (p *RelatedQuery) IsSetNoteGuid() bool {
	return p.NoteGuid != ""
}

func (p *RelatedQuery) IsSetPlainText() bool {
	return p.PlainText != ""
}

func (p *RelatedQuery) IsSetFilter() bool {
	return p.Filter != nil
}

func (p *RelatedQuery) IsSetReferenceUri() bool {
	return p.ReferenceUri != ""
}

func (p *RelatedQuery) IsSetContext() bool {
	return p.Context != ""
}

func (p *RelatedQuery) IsSetCacheKey() bool {
	return p.CacheKey != ""
}

func (p *RelatedQuery) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RelatedQuery) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.NoteGuid = v
	}
	return nil
}

func (p *RelatedQuery) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.PlainText = v
	}
	return nil
}

func (p *RelatedQuery) readField3(iprot thrift.TProtocol) error {
	p.Filter = NewNoteFilter()
	if err := p.Filter.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Filter)
	}
	return nil
}

func (p *RelatedQuery) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.ReferenceUri = v
	}
	return nil
}

func (p *RelatedQuery) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Context = v
	}
	return nil
}

func (p *RelatedQuery) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.CacheKey = v
	}
	return nil
}

func (p *RelatedQuery) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RelatedQuery"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RelatedQuery) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoteGuid() {
		if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:noteGuid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.NoteGuid)); err != nil {
			return fmt.Errorf("%T.noteGuid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:noteGuid: %s", p, err)
		}
	}
	return err
}

func (p *RelatedQuery) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlainText() {
		if err := oprot.WriteFieldBegin("plainText", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:plainText: %s", p, err)
		}
		if err := oprot.WriteString(string(p.PlainText)); err != nil {
			return fmt.Errorf("%T.plainText (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:plainText: %s", p, err)
		}
	}
	return err
}

func (p *RelatedQuery) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Filter != nil {
		if p.IsSetFilter() {
			if err := oprot.WriteFieldBegin("filter", thrift.STRUCT, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:filter: %s", p, err)
			}
			if err := p.Filter.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Filter)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:filter: %s", p, err)
			}
		}
	}
	return err
}

func (p *RelatedQuery) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetReferenceUri() {
		if err := oprot.WriteFieldBegin("referenceUri", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:referenceUri: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ReferenceUri)); err != nil {
			return fmt.Errorf("%T.referenceUri (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:referenceUri: %s", p, err)
		}
	}
	return err
}

func (p *RelatedQuery) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetContext() {
		if err := oprot.WriteFieldBegin("context", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:context: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Context)); err != nil {
			return fmt.Errorf("%T.context (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:context: %s", p, err)
		}
	}
	return err
}

func (p *RelatedQuery) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCacheKey() {
		if err := oprot.WriteFieldBegin("cacheKey", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:cacheKey: %s", p, err)
		}
		if err := oprot.WriteString(string(p.CacheKey)); err != nil {
			return fmt.Errorf("%T.cacheKey (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:cacheKey: %s", p, err)
		}
	}
	return err
}

func (p *RelatedQuery) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelatedQuery(%+v)", *p)
}

type RelatedResult struct {
	Notes               []*edam.Note               `thrift:"notes,1"`
	Notebooks           []*edam.Notebook           `thrift:"notebooks,2"`
	Tags                []*edam.Tag                `thrift:"tags,3"`
	ContainingNotebooks []*edam.NotebookDescriptor `thrift:"containingNotebooks,4"`
	// unused field # 5
	Experts        []*edam.UserProfile    `thrift:"experts,6"`
	RelatedContent []*edam.RelatedContent `thrift:"relatedContent,7"`
	CacheKey       string                 `thrift:"cacheKey,8"`
	CacheExpires   int32                  `thrift:"cacheExpires,9"`
}

func NewRelatedResult() *RelatedResult {
	return &RelatedResult{}
}

func (p *RelatedResult) IsSetNotes() bool {
	return p.Notes != nil && len(p.Notes) > 0
}

func (p *RelatedResult) IsSetNotebooks() bool {
	return p.Notebooks != nil && len(p.Notebooks) > 0
}

func (p *RelatedResult) IsSetTags() bool {
	return p.Tags != nil && len(p.Tags) > 0
}

func (p *RelatedResult) IsSetContainingNotebooks() bool {
	return p.ContainingNotebooks != nil && len(p.ContainingNotebooks) > 0
}

func (p *RelatedResult) IsSetExperts() bool {
	return p.Experts != nil && len(p.Experts) > 0
}

func (p *RelatedResult) IsSetRelatedContent() bool {
	return p.RelatedContent != nil && len(p.RelatedContent) > 0
}

func (p *RelatedResult) IsSetCacheKey() bool {
	return p.CacheKey != ""
}

func (p *RelatedResult) IsSetCacheExpires() bool {
	return p.CacheExpires != 0
}

func (p *RelatedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RelatedResult) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Notes = make([]*edam.Note, 0, size)
	for i := 0; i < size; i++ {
		_elem26 := edam.NewNote()
		if err := _elem26.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem26)
		}
		p.Notes = append(p.Notes, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *RelatedResult) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Notebooks = make([]*edam.Notebook, 0, size)
	for i := 0; i < size; i++ {
		_elem27 := edam.NewNotebook()
		if err := _elem27.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem27)
		}
		p.Notebooks = append(p.Notebooks, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *RelatedResult) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Tags = make([]*edam.Tag, 0, size)
	for i := 0; i < size; i++ {
		_elem28 := edam.NewTag()
		if err := _elem28.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem28)
		}
		p.Tags = append(p.Tags, _elem28)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *RelatedResult) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ContainingNotebooks = make([]*edam.NotebookDescriptor, 0, size)
	for i := 0; i < size; i++ {
		_elem29 := edam.NewNotebookDescriptor()
		if err := _elem29.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem29)
		}
		p.ContainingNotebooks = append(p.ContainingNotebooks, _elem29)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *RelatedResult) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Experts = make([]*edam.UserProfile, 0, size)
	for i := 0; i < size; i++ {
		_elem30 := edam.NewUserProfile()
		if err := _elem30.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem30)
		}
		p.Experts = append(p.Experts, _elem30)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *RelatedResult) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.RelatedContent = make([]*edam.RelatedContent, 0, size)
	for i := 0; i < size; i++ {
		_elem31 := edam.NewRelatedContent()
		if err := _elem31.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem31)
		}
		p.RelatedContent = append(p.RelatedContent, _elem31)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *RelatedResult) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.CacheKey = v
	}
	return nil
}

func (p *RelatedResult) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.CacheExpires = v
	}
	return nil
}

func (p *RelatedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RelatedResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RelatedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Notes != nil {
		if p.IsSetNotes() {
			if err := oprot.WriteFieldBegin("notes", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:notes: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notes)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Notes {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:notes: %s", p, err)
			}
		}
	}
	return err
}

func (p *RelatedResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Notebooks != nil {
		if p.IsSetNotebooks() {
			if err := oprot.WriteFieldBegin("notebooks", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:notebooks: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notebooks)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Notebooks {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:notebooks: %s", p, err)
			}
		}
	}
	return err
}

func (p *RelatedResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Tags != nil {
		if p.IsSetTags() {
			if err := oprot.WriteFieldBegin("tags", thrift.LIST, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:tags: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tags)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Tags {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:tags: %s", p, err)
			}
		}
	}
	return err
}

func (p *RelatedResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.ContainingNotebooks != nil {
		if p.IsSetContainingNotebooks() {
			if err := oprot.WriteFieldBegin("containingNotebooks", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:containingNotebooks: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ContainingNotebooks)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ContainingNotebooks {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:containingNotebooks: %s", p, err)
			}
		}
	}
	return err
}

func (p *RelatedResult) writeField6(oprot thrift.TProtocol) (err error) {
	if p.Experts != nil {
		if p.IsSetExperts() {
			if err := oprot.WriteFieldBegin("experts", thrift.LIST, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:experts: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Experts)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Experts {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:experts: %s", p, err)
			}
		}
	}
	return err
}

func (p *RelatedResult) writeField7(oprot thrift.TProtocol) (err error) {
	if p.RelatedContent != nil {
		if p.IsSetRelatedContent() {
			if err := oprot.WriteFieldBegin("relatedContent", thrift.LIST, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:relatedContent: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RelatedContent)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.RelatedContent {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:relatedContent: %s", p, err)
			}
		}
	}
	return err
}

func (p *RelatedResult) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCacheKey() {
		if err := oprot.WriteFieldBegin("cacheKey", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:cacheKey: %s", p, err)
		}
		if err := oprot.WriteString(string(p.CacheKey)); err != nil {
			return fmt.Errorf("%T.cacheKey (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:cacheKey: %s", p, err)
		}
	}
	return err
}

func (p *RelatedResult) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetCacheExpires() {
		if err := oprot.WriteFieldBegin("cacheExpires", thrift.I32, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:cacheExpires: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.CacheExpires)); err != nil {
			return fmt.Errorf("%T.cacheExpires (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:cacheExpires: %s", p, err)
		}
	}
	return err
}

func (p *RelatedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelatedResult(%+v)", *p)
}

type RelatedResultSpec struct {
	MaxNotes                   int32 `thrift:"maxNotes,1"`
	MaxNotebooks               int32 `thrift:"maxNotebooks,2"`
	MaxTags                    int32 `thrift:"maxTags,3"`
	WritableNotebooksOnly      bool  `thrift:"writableNotebooksOnly,4"`
	IncludeContainingNotebooks bool  `thrift:"includeContainingNotebooks,5"`
	// unused field # 6
	MaxExperts          int32                            `thrift:"maxExperts,7"`
	MaxRelatedContent   int32                            `thrift:"maxRelatedContent,8"`
	RelatedContentTypes map[edam.RelatedContentType]bool `thrift:"relatedContentTypes,9"`
}

func NewRelatedResultSpec() *RelatedResultSpec {
	return &RelatedResultSpec{}
}

func (p *RelatedResultSpec) IsSetMaxNotes() bool {
	return p.MaxNotes != 0
}

func (p *RelatedResultSpec) IsSetMaxNotebooks() bool {
	return p.MaxNotebooks != 0
}

func (p *RelatedResultSpec) IsSetMaxTags() bool {
	return p.MaxTags != 0
}

func (p *RelatedResultSpec) IsSetWritableNotebooksOnly() bool {
	return p.WritableNotebooksOnly != false
}

func (p *RelatedResultSpec) IsSetIncludeContainingNotebooks() bool {
	return p.IncludeContainingNotebooks != false
}

func (p *RelatedResultSpec) IsSetMaxExperts() bool {
	return p.MaxExperts != 0
}

func (p *RelatedResultSpec) IsSetMaxRelatedContent() bool {
	return p.MaxRelatedContent != 0
}

func (p *RelatedResultSpec) IsSetRelatedContentTypes() bool {
	return p.RelatedContentTypes != nil && len(p.RelatedContentTypes) > 0
}

func (p *RelatedResultSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RelatedResultSpec) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.MaxNotes = v
	}
	return nil
}

func (p *RelatedResultSpec) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.MaxNotebooks = v
	}
	return nil
}

func (p *RelatedResultSpec) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.MaxTags = v
	}
	return nil
}

func (p *RelatedResultSpec) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.WritableNotebooksOnly = v
	}
	return nil
}

func (p *RelatedResultSpec) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.IncludeContainingNotebooks = v
	}
	return nil
}

func (p *RelatedResultSpec) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.MaxExperts = v
	}
	return nil
}

func (p *RelatedResultSpec) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.MaxRelatedContent = v
	}
	return nil
}

func (p *RelatedResultSpec) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set being: %s")
	}
	p.RelatedContentTypes = make(map[edam.RelatedContentType]bool, size)
	for i := 0; i < size; i++ {
		var _elem32 edam.RelatedContentType
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem32 = edam.RelatedContentType(v)
		}
		p.RelatedContentTypes[_elem32] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s")
	}
	return nil
}

func (p *RelatedResultSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RelatedResultSpec"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RelatedResultSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxNotes() {
		if err := oprot.WriteFieldBegin("maxNotes", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:maxNotes: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MaxNotes)); err != nil {
			return fmt.Errorf("%T.maxNotes (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:maxNotes: %s", p, err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxNotebooks() {
		if err := oprot.WriteFieldBegin("maxNotebooks", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:maxNotebooks: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MaxNotebooks)); err != nil {
			return fmt.Errorf("%T.maxNotebooks (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:maxNotebooks: %s", p, err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxTags() {
		if err := oprot.WriteFieldBegin("maxTags", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:maxTags: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MaxTags)); err != nil {
			return fmt.Errorf("%T.maxTags (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:maxTags: %s", p, err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetWritableNotebooksOnly() {
		if err := oprot.WriteFieldBegin("writableNotebooksOnly", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:writableNotebooksOnly: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.WritableNotebooksOnly)); err != nil {
			return fmt.Errorf("%T.writableNotebooksOnly (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:writableNotebooksOnly: %s", p, err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeContainingNotebooks() {
		if err := oprot.WriteFieldBegin("includeContainingNotebooks", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:includeContainingNotebooks: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeContainingNotebooks)); err != nil {
			return fmt.Errorf("%T.includeContainingNotebooks (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:includeContainingNotebooks: %s", p, err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxExperts() {
		if err := oprot.WriteFieldBegin("maxExperts", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:maxExperts: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MaxExperts)); err != nil {
			return fmt.Errorf("%T.maxExperts (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:maxExperts: %s", p, err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxRelatedContent() {
		if err := oprot.WriteFieldBegin("maxRelatedContent", thrift.I32, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:maxRelatedContent: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MaxRelatedContent)); err != nil {
			return fmt.Errorf("%T.maxRelatedContent (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:maxRelatedContent: %s", p, err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField9(oprot thrift.TProtocol) (err error) {
	if p.RelatedContentTypes != nil {
		if p.IsSetRelatedContentTypes() {
			if err := oprot.WriteFieldBegin("relatedContentTypes", thrift.SET, 9); err != nil {
				return fmt.Errorf("%T write field begin error 9:relatedContentTypes: %s", p, err)
			}
			if err := oprot.WriteSetBegin(thrift.I32, len(p.RelatedContentTypes)); err != nil {
				return fmt.Errorf("error writing set begin: %s")
			}
			for v, _ := range p.RelatedContentTypes {
				if err := oprot.WriteI32(int32(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteSetEnd(); err != nil {
				return fmt.Errorf("error writing set end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 9:relatedContentTypes: %s", p, err)
			}
		}
	}
	return err
}

func (p *RelatedResultSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelatedResultSpec(%+v)", *p)
}

type UpdateNoteIfUsnMatchesResult struct {
	Note    *edam.Note `thrift:"note,1"`
	Updated bool       `thrift:"updated,2"`
}

func NewUpdateNoteIfUsnMatchesResult() *UpdateNoteIfUsnMatchesResult {
	return &UpdateNoteIfUsnMatchesResult{}
}

func (p *UpdateNoteIfUsnMatchesResult) IsSetNote() bool {
	return p.Note != nil
}

func (p *UpdateNoteIfUsnMatchesResult) IsSetUpdated() bool {
	return p.Updated != false
}

func (p *UpdateNoteIfUsnMatchesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateNoteIfUsnMatchesResult) readField1(iprot thrift.TProtocol) error {
	p.Note = edam.NewNote()
	if err := p.Note.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Note)
	}
	return nil
}

func (p *UpdateNoteIfUsnMatchesResult) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Updated = v
	}
	return nil
}

func (p *UpdateNoteIfUsnMatchesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateNoteIfUsnMatchesResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateNoteIfUsnMatchesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Note != nil {
		if p.IsSetNote() {
			if err := oprot.WriteFieldBegin("note", thrift.STRUCT, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:note: %s", p, err)
			}
			if err := p.Note.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Note)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:note: %s", p, err)
			}
		}
	}
	return err
}

func (p *UpdateNoteIfUsnMatchesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdated() {
		if err := oprot.WriteFieldBegin("updated", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:updated: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Updated)); err != nil {
			return fmt.Errorf("%T.updated (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:updated: %s", p, err)
		}
	}
	return err
}

func (p *UpdateNoteIfUsnMatchesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNoteIfUsnMatchesResult(%+v)", *p)
}

type ShareRelationshipRestrictions struct {
	NoSetReadOnly         bool `thrift:"noSetReadOnly,1"`
	NoSetReadPlusActivity bool `thrift:"noSetReadPlusActivity,2"`
	NoSetModify           bool `thrift:"noSetModify,3"`
	NoSetFullAccess       bool `thrift:"noSetFullAccess,4"`
}

func NewShareRelationshipRestrictions() *ShareRelationshipRestrictions {
	return &ShareRelationshipRestrictions{}
}

func (p *ShareRelationshipRestrictions) IsSetNoSetReadOnly() bool {
	return p.NoSetReadOnly != false
}

func (p *ShareRelationshipRestrictions) IsSetNoSetReadPlusActivity() bool {
	return p.NoSetReadPlusActivity != false
}

func (p *ShareRelationshipRestrictions) IsSetNoSetModify() bool {
	return p.NoSetModify != false
}

func (p *ShareRelationshipRestrictions) IsSetNoSetFullAccess() bool {
	return p.NoSetFullAccess != false
}

func (p *ShareRelationshipRestrictions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShareRelationshipRestrictions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.NoSetReadOnly = v
	}
	return nil
}

func (p *ShareRelationshipRestrictions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.NoSetReadPlusActivity = v
	}
	return nil
}

func (p *ShareRelationshipRestrictions) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.NoSetModify = v
	}
	return nil
}

func (p *ShareRelationshipRestrictions) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.NoSetFullAccess = v
	}
	return nil
}

func (p *ShareRelationshipRestrictions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShareRelationshipRestrictions"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ShareRelationshipRestrictions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetReadOnly() {
		if err := oprot.WriteFieldBegin("noSetReadOnly", thrift.BOOL, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:noSetReadOnly: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoSetReadOnly)); err != nil {
			return fmt.Errorf("%T.noSetReadOnly (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:noSetReadOnly: %s", p, err)
		}
	}
	return err
}

func (p *ShareRelationshipRestrictions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetReadPlusActivity() {
		if err := oprot.WriteFieldBegin("noSetReadPlusActivity", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:noSetReadPlusActivity: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoSetReadPlusActivity)); err != nil {
			return fmt.Errorf("%T.noSetReadPlusActivity (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:noSetReadPlusActivity: %s", p, err)
		}
	}
	return err
}

func (p *ShareRelationshipRestrictions) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetModify() {
		if err := oprot.WriteFieldBegin("noSetModify", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:noSetModify: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoSetModify)); err != nil {
			return fmt.Errorf("%T.noSetModify (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:noSetModify: %s", p, err)
		}
	}
	return err
}

func (p *ShareRelationshipRestrictions) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetFullAccess() {
		if err := oprot.WriteFieldBegin("noSetFullAccess", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:noSetFullAccess: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoSetFullAccess)); err != nil {
			return fmt.Errorf("%T.noSetFullAccess (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:noSetFullAccess: %s", p, err)
		}
	}
	return err
}

func (p *ShareRelationshipRestrictions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShareRelationshipRestrictions(%+v)", *p)
}

type InvitationShareRelationship struct {
	DisplayName           string                          `thrift:"displayName,1"`
	RecipientUserIdentity *edam.UserIdentity              `thrift:"recipientUserIdentity,2"`
	Privilege             ShareRelationshipPrivilegeLevel `thrift:"privilege,3"`
	// unused field # 4
	SharerUserId edam.UserID `thrift:"sharerUserId,5"`
}

func NewInvitationShareRelationship() *InvitationShareRelationship {
	return &InvitationShareRelationship{
		Privilege: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *InvitationShareRelationship) IsSetDisplayName() bool {
	return p.DisplayName != ""
}

func (p *InvitationShareRelationship) IsSetRecipientUserIdentity() bool {
	return p.RecipientUserIdentity != nil
}

func (p *InvitationShareRelationship) IsSetPrivilege() bool {
	return int64(p.Privilege) != math.MinInt32-1
}

func (p *InvitationShareRelationship) IsSetSharerUserId() bool {
	return p.SharerUserId != 0
}

func (p *InvitationShareRelationship) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InvitationShareRelationship) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *InvitationShareRelationship) readField2(iprot thrift.TProtocol) error {
	p.RecipientUserIdentity = edam.NewUserIdentity()
	if err := p.RecipientUserIdentity.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RecipientUserIdentity)
	}
	return nil
}

func (p *InvitationShareRelationship) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Privilege = ShareRelationshipPrivilegeLevel(v)
	}
	return nil
}

func (p *InvitationShareRelationship) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.SharerUserId = edam.UserID(v)
	}
	return nil
}

func (p *InvitationShareRelationship) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvitationShareRelationship"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *InvitationShareRelationship) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplayName() {
		if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:displayName: %s", p, err)
		}
		if err := oprot.WriteString(string(p.DisplayName)); err != nil {
			return fmt.Errorf("%T.displayName (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:displayName: %s", p, err)
		}
	}
	return err
}

func (p *InvitationShareRelationship) writeField2(oprot thrift.TProtocol) (err error) {
	if p.RecipientUserIdentity != nil {
		if p.IsSetRecipientUserIdentity() {
			if err := oprot.WriteFieldBegin("recipientUserIdentity", thrift.STRUCT, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:recipientUserIdentity: %s", p, err)
			}
			if err := p.RecipientUserIdentity.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.RecipientUserIdentity)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:recipientUserIdentity: %s", p, err)
			}
		}
	}
	return err
}

func (p *InvitationShareRelationship) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:privilege: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Privilege)); err != nil {
			return fmt.Errorf("%T.privilege (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:privilege: %s", p, err)
		}
	}
	return err
}

func (p *InvitationShareRelationship) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSharerUserId() {
		if err := oprot.WriteFieldBegin("sharerUserId", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:sharerUserId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.SharerUserId)); err != nil {
			return fmt.Errorf("%T.sharerUserId (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:sharerUserId: %s", p, err)
		}
	}
	return err
}

func (p *InvitationShareRelationship) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvitationShareRelationship(%+v)", *p)
}

type MemberShareRelationship struct {
	DisplayName         string                          `thrift:"displayName,1"`
	RecipientUserId     edam.UserID                     `thrift:"recipientUserId,2"`
	BestPrivilege       ShareRelationshipPrivilegeLevel `thrift:"bestPrivilege,3"`
	IndividualPrivilege ShareRelationshipPrivilegeLevel `thrift:"individualPrivilege,4"`
	Restrictions        *ShareRelationshipRestrictions  `thrift:"restrictions,5"`
	SharerUserId        edam.UserID                     `thrift:"sharerUserId,6"`
}

func NewMemberShareRelationship() *MemberShareRelationship {
	return &MemberShareRelationship{
		BestPrivilege: math.MinInt32 - 1, // unset sentinal value

		IndividualPrivilege: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *MemberShareRelationship) IsSetDisplayName() bool {
	return p.DisplayName != ""
}

func (p *MemberShareRelationship) IsSetRecipientUserId() bool {
	return p.RecipientUserId != 0
}

func (p *MemberShareRelationship) IsSetBestPrivilege() bool {
	return int64(p.BestPrivilege) != math.MinInt32-1
}

func (p *MemberShareRelationship) IsSetIndividualPrivilege() bool {
	return int64(p.IndividualPrivilege) != math.MinInt32-1
}

func (p *MemberShareRelationship) IsSetRestrictions() bool {
	return p.Restrictions != nil
}

func (p *MemberShareRelationship) IsSetSharerUserId() bool {
	return p.SharerUserId != 0
}

func (p *MemberShareRelationship) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MemberShareRelationship) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *MemberShareRelationship) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.RecipientUserId = edam.UserID(v)
	}
	return nil
}

func (p *MemberShareRelationship) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.BestPrivilege = ShareRelationshipPrivilegeLevel(v)
	}
	return nil
}

func (p *MemberShareRelationship) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.IndividualPrivilege = ShareRelationshipPrivilegeLevel(v)
	}
	return nil
}

func (p *MemberShareRelationship) readField5(iprot thrift.TProtocol) error {
	p.Restrictions = NewShareRelationshipRestrictions()
	if err := p.Restrictions.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Restrictions)
	}
	return nil
}

func (p *MemberShareRelationship) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.SharerUserId = edam.UserID(v)
	}
	return nil
}

func (p *MemberShareRelationship) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MemberShareRelationship"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *MemberShareRelationship) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplayName() {
		if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:displayName: %s", p, err)
		}
		if err := oprot.WriteString(string(p.DisplayName)); err != nil {
			return fmt.Errorf("%T.displayName (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:displayName: %s", p, err)
		}
	}
	return err
}

func (p *MemberShareRelationship) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecipientUserId() {
		if err := oprot.WriteFieldBegin("recipientUserId", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:recipientUserId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.RecipientUserId)); err != nil {
			return fmt.Errorf("%T.recipientUserId (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:recipientUserId: %s", p, err)
		}
	}
	return err
}

func (p *MemberShareRelationship) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBestPrivilege() {
		if err := oprot.WriteFieldBegin("bestPrivilege", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:bestPrivilege: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.BestPrivilege)); err != nil {
			return fmt.Errorf("%T.bestPrivilege (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:bestPrivilege: %s", p, err)
		}
	}
	return err
}

func (p *MemberShareRelationship) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndividualPrivilege() {
		if err := oprot.WriteFieldBegin("individualPrivilege", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:individualPrivilege: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.IndividualPrivilege)); err != nil {
			return fmt.Errorf("%T.individualPrivilege (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:individualPrivilege: %s", p, err)
		}
	}
	return err
}

func (p *MemberShareRelationship) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Restrictions != nil {
		if p.IsSetRestrictions() {
			if err := oprot.WriteFieldBegin("restrictions", thrift.STRUCT, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:restrictions: %s", p, err)
			}
			if err := p.Restrictions.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Restrictions)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:restrictions: %s", p, err)
			}
		}
	}
	return err
}

func (p *MemberShareRelationship) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSharerUserId() {
		if err := oprot.WriteFieldBegin("sharerUserId", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:sharerUserId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.SharerUserId)); err != nil {
			return fmt.Errorf("%T.sharerUserId (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:sharerUserId: %s", p, err)
		}
	}
	return err
}

func (p *MemberShareRelationship) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberShareRelationship(%+v)", *p)
}

type ShareRelationships struct {
	Invitations            []*InvitationShareRelationship `thrift:"invitations,1"`
	Memberships            []*MemberShareRelationship     `thrift:"memberships,2"`
	InvitationRestrictions *ShareRelationshipRestrictions `thrift:"invitationRestrictions,3"`
}

func NewShareRelationships() *ShareRelationships {
	return &ShareRelationships{}
}

func (p *ShareRelationships) IsSetInvitations() bool {
	return p.Invitations != nil && len(p.Invitations) > 0
}

func (p *ShareRelationships) IsSetMemberships() bool {
	return p.Memberships != nil && len(p.Memberships) > 0
}

func (p *ShareRelationships) IsSetInvitationRestrictions() bool {
	return p.InvitationRestrictions != nil
}

func (p *ShareRelationships) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShareRelationships) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Invitations = make([]*InvitationShareRelationship, 0, size)
	for i := 0; i < size; i++ {
		_elem33 := NewInvitationShareRelationship()
		if err := _elem33.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem33)
		}
		p.Invitations = append(p.Invitations, _elem33)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ShareRelationships) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Memberships = make([]*MemberShareRelationship, 0, size)
	for i := 0; i < size; i++ {
		_elem34 := NewMemberShareRelationship()
		if err := _elem34.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem34)
		}
		p.Memberships = append(p.Memberships, _elem34)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ShareRelationships) readField3(iprot thrift.TProtocol) error {
	p.InvitationRestrictions = NewShareRelationshipRestrictions()
	if err := p.InvitationRestrictions.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.InvitationRestrictions)
	}
	return nil
}

func (p *ShareRelationships) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShareRelationships"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ShareRelationships) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Invitations != nil {
		if p.IsSetInvitations() {
			if err := oprot.WriteFieldBegin("invitations", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:invitations: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Invitations)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Invitations {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:invitations: %s", p, err)
			}
		}
	}
	return err
}

func (p *ShareRelationships) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Memberships != nil {
		if p.IsSetMemberships() {
			if err := oprot.WriteFieldBegin("memberships", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:memberships: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Memberships)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Memberships {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:memberships: %s", p, err)
			}
		}
	}
	return err
}

func (p *ShareRelationships) writeField3(oprot thrift.TProtocol) (err error) {
	if p.InvitationRestrictions != nil {
		if p.IsSetInvitationRestrictions() {
			if err := oprot.WriteFieldBegin("invitationRestrictions", thrift.STRUCT, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:invitationRestrictions: %s", p, err)
			}
			if err := p.InvitationRestrictions.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.InvitationRestrictions)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:invitationRestrictions: %s", p, err)
			}
		}
	}
	return err
}

func (p *ShareRelationships) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShareRelationships(%+v)", *p)
}

type ManageNotebookSharesParameters struct {
	NotebookGuid                string                         `thrift:"notebookGuid,1"`
	InviteMessage               string                         `thrift:"inviteMessage,2"`
	MembershipsToUpdate         []*MemberShareRelationship     `thrift:"membershipsToUpdate,3"`
	InvitationsToCreateOrUpdate []*InvitationShareRelationship `thrift:"invitationsToCreateOrUpdate,4"`
	Unshares                    []*edam.UserIdentity           `thrift:"unshares,5"`
}

func NewManageNotebookSharesParameters() *ManageNotebookSharesParameters {
	return &ManageNotebookSharesParameters{}
}

func (p *ManageNotebookSharesParameters) IsSetNotebookGuid() bool {
	return p.NotebookGuid != ""
}

func (p *ManageNotebookSharesParameters) IsSetInviteMessage() bool {
	return p.InviteMessage != ""
}

func (p *ManageNotebookSharesParameters) IsSetMembershipsToUpdate() bool {
	return p.MembershipsToUpdate != nil && len(p.MembershipsToUpdate) > 0
}

func (p *ManageNotebookSharesParameters) IsSetInvitationsToCreateOrUpdate() bool {
	return p.InvitationsToCreateOrUpdate != nil && len(p.InvitationsToCreateOrUpdate) > 0
}

func (p *ManageNotebookSharesParameters) IsSetUnshares() bool {
	return p.Unshares != nil && len(p.Unshares) > 0
}

func (p *ManageNotebookSharesParameters) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ManageNotebookSharesParameters) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.NotebookGuid = v
	}
	return nil
}

func (p *ManageNotebookSharesParameters) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.InviteMessage = v
	}
	return nil
}

func (p *ManageNotebookSharesParameters) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.MembershipsToUpdate = make([]*MemberShareRelationship, 0, size)
	for i := 0; i < size; i++ {
		_elem35 := NewMemberShareRelationship()
		if err := _elem35.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem35)
		}
		p.MembershipsToUpdate = append(p.MembershipsToUpdate, _elem35)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ManageNotebookSharesParameters) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.InvitationsToCreateOrUpdate = make([]*InvitationShareRelationship, 0, size)
	for i := 0; i < size; i++ {
		_elem36 := NewInvitationShareRelationship()
		if err := _elem36.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem36)
		}
		p.InvitationsToCreateOrUpdate = append(p.InvitationsToCreateOrUpdate, _elem36)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ManageNotebookSharesParameters) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Unshares = make([]*edam.UserIdentity, 0, size)
	for i := 0; i < size; i++ {
		_elem37 := edam.NewUserIdentity()
		if err := _elem37.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem37)
		}
		p.Unshares = append(p.Unshares, _elem37)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ManageNotebookSharesParameters) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ManageNotebookSharesParameters"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ManageNotebookSharesParameters) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookGuid() {
		if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:notebookGuid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.NotebookGuid)); err != nil {
			return fmt.Errorf("%T.notebookGuid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:notebookGuid: %s", p, err)
		}
	}
	return err
}

func (p *ManageNotebookSharesParameters) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInviteMessage() {
		if err := oprot.WriteFieldBegin("inviteMessage", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:inviteMessage: %s", p, err)
		}
		if err := oprot.WriteString(string(p.InviteMessage)); err != nil {
			return fmt.Errorf("%T.inviteMessage (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:inviteMessage: %s", p, err)
		}
	}
	return err
}

func (p *ManageNotebookSharesParameters) writeField3(oprot thrift.TProtocol) (err error) {
	if p.MembershipsToUpdate != nil {
		if p.IsSetMembershipsToUpdate() {
			if err := oprot.WriteFieldBegin("membershipsToUpdate", thrift.LIST, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:membershipsToUpdate: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MembershipsToUpdate)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.MembershipsToUpdate {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:membershipsToUpdate: %s", p, err)
			}
		}
	}
	return err
}

func (p *ManageNotebookSharesParameters) writeField4(oprot thrift.TProtocol) (err error) {
	if p.InvitationsToCreateOrUpdate != nil {
		if p.IsSetInvitationsToCreateOrUpdate() {
			if err := oprot.WriteFieldBegin("invitationsToCreateOrUpdate", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:invitationsToCreateOrUpdate: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InvitationsToCreateOrUpdate)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.InvitationsToCreateOrUpdate {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:invitationsToCreateOrUpdate: %s", p, err)
			}
		}
	}
	return err
}

func (p *ManageNotebookSharesParameters) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Unshares != nil {
		if p.IsSetUnshares() {
			if err := oprot.WriteFieldBegin("unshares", thrift.LIST, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:unshares: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Unshares)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Unshares {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:unshares: %s", p, err)
			}
		}
	}
	return err
}

func (p *ManageNotebookSharesParameters) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManageNotebookSharesParameters(%+v)", *p)
}

type ManageNotebookSharesError struct {
	UserIdentity      *edam.UserIdentity          `thrift:"userIdentity,1"`
	UserException     *edam.EDAMUserException     `thrift:"userException,2"`
	NotFoundException *edam.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewManageNotebookSharesError() *ManageNotebookSharesError {
	return &ManageNotebookSharesError{}
}

func (p *ManageNotebookSharesError) IsSetUserIdentity() bool {
	return p.UserIdentity != nil
}

func (p *ManageNotebookSharesError) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *ManageNotebookSharesError) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *ManageNotebookSharesError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ManageNotebookSharesError) readField1(iprot thrift.TProtocol) error {
	p.UserIdentity = edam.NewUserIdentity()
	if err := p.UserIdentity.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserIdentity)
	}
	return nil
}

func (p *ManageNotebookSharesError) readField2(iprot thrift.TProtocol) error {
	p.UserException = edam.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ManageNotebookSharesError) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = edam.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *ManageNotebookSharesError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ManageNotebookSharesError"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ManageNotebookSharesError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserIdentity != nil {
		if p.IsSetUserIdentity() {
			if err := oprot.WriteFieldBegin("userIdentity", thrift.STRUCT, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:userIdentity: %s", p, err)
			}
			if err := p.UserIdentity.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.UserIdentity)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:userIdentity: %s", p, err)
			}
		}
	}
	return err
}

func (p *ManageNotebookSharesError) writeField2(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if p.IsSetUserException() {
			if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:userException: %s", p, err)
			}
			if err := p.UserException.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.UserException)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:userException: %s", p, err)
			}
		}
	}
	return err
}

func (p *ManageNotebookSharesError) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if p.IsSetNotFoundException() {
			if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
			}
			if err := p.NotFoundException.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
			}
		}
	}
	return err
}

func (p *ManageNotebookSharesError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManageNotebookSharesError(%+v)", *p)
}

type ManageNotebookSharesResult struct {
	Errors []*ManageNotebookSharesError `thrift:"errors,1"`
}

func NewManageNotebookSharesResult() *ManageNotebookSharesResult {
	return &ManageNotebookSharesResult{}
}

func (p *ManageNotebookSharesResult) IsSetErrors() bool {
	return p.Errors != nil && len(p.Errors) > 0
}

func (p *ManageNotebookSharesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ManageNotebookSharesResult) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Errors = make([]*ManageNotebookSharesError, 0, size)
	for i := 0; i < size; i++ {
		_elem38 := NewManageNotebookSharesError()
		if err := _elem38.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem38)
		}
		p.Errors = append(p.Errors, _elem38)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ManageNotebookSharesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ManageNotebookSharesResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ManageNotebookSharesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Errors != nil {
		if p.IsSetErrors() {
			if err := oprot.WriteFieldBegin("errors", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:errors: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Errors)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Errors {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:errors: %s", p, err)
			}
		}
	}
	return err
}

func (p *ManageNotebookSharesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManageNotebookSharesResult(%+v)", *p)
}

type SharedNoteTemplate struct {
	NoteGuid          edam.Guid                     `thrift:"noteGuid,1"`
	RecipientContacts []*edam.Contact               `thrift:"recipientContacts,2"`
	Privilege         edam.SharedNotePrivilegeLevel `thrift:"privilege,3"`
	RecipientThreadId edam.MessageThreadID          `thrift:"recipientThreadId,4"`
}

func NewSharedNoteTemplate() *SharedNoteTemplate {
	return &SharedNoteTemplate{
		Privilege: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *SharedNoteTemplate) IsSetNoteGuid() bool {
	return p.NoteGuid != ""
}

func (p *SharedNoteTemplate) IsSetRecipientThreadId() bool {
	return p.RecipientThreadId != 0
}

func (p *SharedNoteTemplate) IsSetRecipientContacts() bool {
	return p.RecipientContacts != nil && len(p.RecipientContacts) > 0
}

func (p *SharedNoteTemplate) IsSetPrivilege() bool {
	return int64(p.Privilege) != math.MinInt32-1
}

func (p *SharedNoteTemplate) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SharedNoteTemplate) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.NoteGuid = edam.Guid(v)
	}
	return nil
}

func (p *SharedNoteTemplate) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.RecipientThreadId = edam.MessageThreadID(v)
	}
	return nil
}

func (p *SharedNoteTemplate) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.RecipientContacts = make([]*edam.Contact, 0, size)
	for i := 0; i < size; i++ {
		_elem39 := edam.NewContact()
		if err := _elem39.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem39)
		}
		p.RecipientContacts = append(p.RecipientContacts, _elem39)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SharedNoteTemplate) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Privilege = edam.SharedNotePrivilegeLevel(v)
	}
	return nil
}

func (p *SharedNoteTemplate) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SharedNoteTemplate"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SharedNoteTemplate) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoteGuid() {
		if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:noteGuid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.NoteGuid)); err != nil {
			return fmt.Errorf("%T.noteGuid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:noteGuid: %s", p, err)
		}
	}
	return err
}

func (p *SharedNoteTemplate) writeField2(oprot thrift.TProtocol) (err error) {
	if p.RecipientContacts != nil {
		if p.IsSetRecipientContacts() {
			if err := oprot.WriteFieldBegin("recipientContacts", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:recipientContacts: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RecipientContacts)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.RecipientContacts {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:recipientContacts: %s", p, err)
			}
		}
	}
	return err
}

func (p *SharedNoteTemplate) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:privilege: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Privilege)); err != nil {
			return fmt.Errorf("%T.privilege (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:privilege: %s", p, err)
		}
	}
	return err
}

func (p *SharedNoteTemplate) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecipientThreadId() {
		if err := oprot.WriteFieldBegin("recipientThreadId", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:recipientThreadId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.RecipientThreadId)); err != nil {
			return fmt.Errorf("%T.recipientThreadId (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:recipientThreadId: %s", p, err)
		}
	}
	return err
}

func (p *SharedNoteTemplate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SharedNoteTemplate(%+v)", *p)
}

type NotebookShareTemplate struct {
	NotebookGuid      edam.Guid                         `thrift:"notebookGuid,1"`
	RecipientContacts []*edam.Contact                   `thrift:"recipientContacts,2"`
	Privilege         edam.SharedNotebookPrivilegeLevel `thrift:"privilege,3"`
	RecipientThreadId edam.MessageThreadID              `thrift:"recipientThreadId,4"`
}

func NewNotebookShareTemplate() *NotebookShareTemplate {
	return &NotebookShareTemplate{
		Privilege: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *NotebookShareTemplate) IsSetNotebookGuid() bool {
	return p.NotebookGuid != ""
}

func (p *NotebookShareTemplate) IsSetRecipientThreadId() bool {
	return p.RecipientThreadId != 0
}

func (p *NotebookShareTemplate) IsSetRecipientContacts() bool {
	return p.RecipientContacts != nil && len(p.RecipientContacts) > 0
}

func (p *NotebookShareTemplate) IsSetPrivilege() bool {
	return int64(p.Privilege) != math.MinInt32-1
}

func (p *NotebookShareTemplate) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotebookShareTemplate) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.NotebookGuid = edam.Guid(v)
	}
	return nil
}

func (p *NotebookShareTemplate) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.RecipientThreadId = edam.MessageThreadID(v)
	}
	return nil
}

func (p *NotebookShareTemplate) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.RecipientContacts = make([]*edam.Contact, 0, size)
	for i := 0; i < size; i++ {
		_elem40 := edam.NewContact()
		if err := _elem40.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem40)
		}
		p.RecipientContacts = append(p.RecipientContacts, _elem40)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NotebookShareTemplate) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Privilege = edam.SharedNotebookPrivilegeLevel(v)
	}
	return nil
}

func (p *NotebookShareTemplate) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NotebookShareTemplate"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NotebookShareTemplate) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookGuid() {
		if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:notebookGuid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.NotebookGuid)); err != nil {
			return fmt.Errorf("%T.notebookGuid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:notebookGuid: %s", p, err)
		}
	}
	return err
}

func (p *NotebookShareTemplate) writeField2(oprot thrift.TProtocol) (err error) {
	if p.RecipientContacts != nil {
		if p.IsSetRecipientContacts() {
			if err := oprot.WriteFieldBegin("recipientContacts", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:recipientContacts: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RecipientContacts)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.RecipientContacts {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:recipientContacts: %s", p, err)
			}
		}
	}
	return err
}

func (p *NotebookShareTemplate) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:privilege: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Privilege)); err != nil {
			return fmt.Errorf("%T.privilege (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:privilege: %s", p, err)
		}
	}
	return err
}

func (p *NotebookShareTemplate) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecipientThreadId() {
		if err := oprot.WriteFieldBegin("recipientThreadId", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:recipientThreadId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.RecipientThreadId)); err != nil {
			return fmt.Errorf("%T.recipientThreadId (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:recipientThreadId: %s", p, err)
		}
	}
	return err
}

func (p *NotebookShareTemplate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotebookShareTemplate(%+v)", *p)
}

type CreateOrUpdateNotebookSharesResult struct {
	UpdateSequenceNum int32                  `thrift:"updateSequenceNum,1"`
	MatchingShares    []*edam.SharedNotebook `thrift:"matchingShares,2"`
}

func NewCreateOrUpdateNotebookSharesResult() *CreateOrUpdateNotebookSharesResult {
	return &CreateOrUpdateNotebookSharesResult{}
}

func (p *CreateOrUpdateNotebookSharesResult) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != 0
}

func (p *CreateOrUpdateNotebookSharesResult) IsSetMatchingShares() bool {
	return p.MatchingShares != nil && len(p.MatchingShares) > 0
}

func (p *CreateOrUpdateNotebookSharesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateOrUpdateNotebookSharesResult) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.UpdateSequenceNum = v
	}
	return nil
}

func (p *CreateOrUpdateNotebookSharesResult) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.MatchingShares = make([]*edam.SharedNotebook, 0, size)
	for i := 0; i < size; i++ {
		_elem41 := edam.NewSharedNotebook()
		if err := _elem41.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem41)
		}
		p.MatchingShares = append(p.MatchingShares, _elem41)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *CreateOrUpdateNotebookSharesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateOrUpdateNotebookSharesResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateOrUpdateNotebookSharesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:updateSequenceNum: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UpdateSequenceNum)); err != nil {
			return fmt.Errorf("%T.updateSequenceNum (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:updateSequenceNum: %s", p, err)
		}
	}
	return err
}

func (p *CreateOrUpdateNotebookSharesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.MatchingShares != nil {
		if p.IsSetMatchingShares() {
			if err := oprot.WriteFieldBegin("matchingShares", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:matchingShares: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MatchingShares)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.MatchingShares {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:matchingShares: %s", p, err)
			}
		}
	}
	return err
}

func (p *CreateOrUpdateNotebookSharesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrUpdateNotebookSharesResult(%+v)", *p)
}

type NoteShareRelationshipRestrictions struct {
	NoSetReadNote   bool `thrift:"noSetReadNote,1"`
	NoSetModifyNote bool `thrift:"noSetModifyNote,2"`
	NoSetFullAccess bool `thrift:"noSetFullAccess,3"`
}

func NewNoteShareRelationshipRestrictions() *NoteShareRelationshipRestrictions {
	return &NoteShareRelationshipRestrictions{}
}

func (p *NoteShareRelationshipRestrictions) IsSetNoSetReadNote() bool {
	return p.NoSetReadNote != false
}

func (p *NoteShareRelationshipRestrictions) IsSetNoSetModifyNote() bool {
	return p.NoSetModifyNote != false
}

func (p *NoteShareRelationshipRestrictions) IsSetNoSetFullAccess() bool {
	return p.NoSetFullAccess != false
}

func (p *NoteShareRelationshipRestrictions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteShareRelationshipRestrictions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.NoSetReadNote = v
	}
	return nil
}

func (p *NoteShareRelationshipRestrictions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.NoSetModifyNote = v
	}
	return nil
}

func (p *NoteShareRelationshipRestrictions) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.NoSetFullAccess = v
	}
	return nil
}

func (p *NoteShareRelationshipRestrictions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteShareRelationshipRestrictions"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteShareRelationshipRestrictions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetReadNote() {
		if err := oprot.WriteFieldBegin("noSetReadNote", thrift.BOOL, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:noSetReadNote: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoSetReadNote)); err != nil {
			return fmt.Errorf("%T.noSetReadNote (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:noSetReadNote: %s", p, err)
		}
	}
	return err
}

func (p *NoteShareRelationshipRestrictions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetModifyNote() {
		if err := oprot.WriteFieldBegin("noSetModifyNote", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:noSetModifyNote: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoSetModifyNote)); err != nil {
			return fmt.Errorf("%T.noSetModifyNote (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:noSetModifyNote: %s", p, err)
		}
	}
	return err
}

func (p *NoteShareRelationshipRestrictions) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetFullAccess() {
		if err := oprot.WriteFieldBegin("noSetFullAccess", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:noSetFullAccess: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoSetFullAccess)); err != nil {
			return fmt.Errorf("%T.noSetFullAccess (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:noSetFullAccess: %s", p, err)
		}
	}
	return err
}

func (p *NoteShareRelationshipRestrictions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteShareRelationshipRestrictions(%+v)", *p)
}

type NoteMemberShareRelationship struct {
	DisplayName     string                             `thrift:"displayName,1"`
	RecipientUserId edam.UserID                        `thrift:"recipientUserId,2"`
	Privilege       edam.SharedNotePrivilegeLevel      `thrift:"privilege,3"`
	Restrictions    *NoteShareRelationshipRestrictions `thrift:"restrictions,4"`
	SharerUserId    edam.UserID                        `thrift:"sharerUserId,5"`
}

func NewNoteMemberShareRelationship() *NoteMemberShareRelationship {
	return &NoteMemberShareRelationship{
		Privilege: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *NoteMemberShareRelationship) IsSetDisplayName() bool {
	return p.DisplayName != ""
}

func (p *NoteMemberShareRelationship) IsSetRecipientUserId() bool {
	return p.RecipientUserId != 0
}

func (p *NoteMemberShareRelationship) IsSetPrivilege() bool {
	return int64(p.Privilege) != math.MinInt32-1
}

func (p *NoteMemberShareRelationship) IsSetRestrictions() bool {
	return p.Restrictions != nil
}

func (p *NoteMemberShareRelationship) IsSetSharerUserId() bool {
	return p.SharerUserId != 0
}

func (p *NoteMemberShareRelationship) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteMemberShareRelationship) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *NoteMemberShareRelationship) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.RecipientUserId = edam.UserID(v)
	}
	return nil
}

func (p *NoteMemberShareRelationship) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Privilege = edam.SharedNotePrivilegeLevel(v)
	}
	return nil
}

func (p *NoteMemberShareRelationship) readField4(iprot thrift.TProtocol) error {
	p.Restrictions = NewNoteShareRelationshipRestrictions()
	if err := p.Restrictions.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Restrictions)
	}
	return nil
}

func (p *NoteMemberShareRelationship) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.SharerUserId = edam.UserID(v)
	}
	return nil
}

func (p *NoteMemberShareRelationship) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteMemberShareRelationship"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteMemberShareRelationship) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplayName() {
		if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:displayName: %s", p, err)
		}
		if err := oprot.WriteString(string(p.DisplayName)); err != nil {
			return fmt.Errorf("%T.displayName (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:displayName: %s", p, err)
		}
	}
	return err
}

func (p *NoteMemberShareRelationship) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecipientUserId() {
		if err := oprot.WriteFieldBegin("recipientUserId", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:recipientUserId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.RecipientUserId)); err != nil {
			return fmt.Errorf("%T.recipientUserId (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:recipientUserId: %s", p, err)
		}
	}
	return err
}

func (p *NoteMemberShareRelationship) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:privilege: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Privilege)); err != nil {
			return fmt.Errorf("%T.privilege (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:privilege: %s", p, err)
		}
	}
	return err
}

func (p *NoteMemberShareRelationship) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Restrictions != nil {
		if p.IsSetRestrictions() {
			if err := oprot.WriteFieldBegin("restrictions", thrift.STRUCT, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:restrictions: %s", p, err)
			}
			if err := p.Restrictions.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Restrictions)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:restrictions: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteMemberShareRelationship) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSharerUserId() {
		if err := oprot.WriteFieldBegin("sharerUserId", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:sharerUserId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.SharerUserId)); err != nil {
			return fmt.Errorf("%T.sharerUserId (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:sharerUserId: %s", p, err)
		}
	}
	return err
}

func (p *NoteMemberShareRelationship) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteMemberShareRelationship(%+v)", *p)
}

type NoteInvitationShareRelationship struct {
	DisplayName         string                        `thrift:"displayName,1"`
	RecipientIdentityId edam.IdentityID               `thrift:"recipientIdentityId,2"`
	Privilege           edam.SharedNotePrivilegeLevel `thrift:"privilege,3"`
	// unused field # 4
	SharerUserId edam.UserID `thrift:"sharerUserId,5"`
}

func NewNoteInvitationShareRelationship() *NoteInvitationShareRelationship {
	return &NoteInvitationShareRelationship{
		Privilege: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *NoteInvitationShareRelationship) IsSetDisplayName() bool {
	return p.DisplayName != ""
}

func (p *NoteInvitationShareRelationship) IsSetRecipientIdentityId() bool {
	return p.RecipientIdentityId != 0
}

func (p *NoteInvitationShareRelationship) IsSetPrivilege() bool {
	return int64(p.Privilege) != math.MinInt32-1
}

func (p *NoteInvitationShareRelationship) IsSetSharerUserId() bool {
	return p.SharerUserId != 0
}

func (p *NoteInvitationShareRelationship) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteInvitationShareRelationship) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DisplayName = v
	}
	return nil
}

func (p *NoteInvitationShareRelationship) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.RecipientIdentityId = edam.IdentityID(v)
	}
	return nil
}

func (p *NoteInvitationShareRelationship) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Privilege = edam.SharedNotePrivilegeLevel(v)
	}
	return nil
}

func (p *NoteInvitationShareRelationship) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.SharerUserId = edam.UserID(v)
	}
	return nil
}

func (p *NoteInvitationShareRelationship) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteInvitationShareRelationship"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteInvitationShareRelationship) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplayName() {
		if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:displayName: %s", p, err)
		}
		if err := oprot.WriteString(string(p.DisplayName)); err != nil {
			return fmt.Errorf("%T.displayName (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:displayName: %s", p, err)
		}
	}
	return err
}

func (p *NoteInvitationShareRelationship) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecipientIdentityId() {
		if err := oprot.WriteFieldBegin("recipientIdentityId", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:recipientIdentityId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.RecipientIdentityId)); err != nil {
			return fmt.Errorf("%T.recipientIdentityId (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:recipientIdentityId: %s", p, err)
		}
	}
	return err
}

func (p *NoteInvitationShareRelationship) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:privilege: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Privilege)); err != nil {
			return fmt.Errorf("%T.privilege (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:privilege: %s", p, err)
		}
	}
	return err
}

func (p *NoteInvitationShareRelationship) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSharerUserId() {
		if err := oprot.WriteFieldBegin("sharerUserId", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:sharerUserId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.SharerUserId)); err != nil {
			return fmt.Errorf("%T.sharerUserId (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:sharerUserId: %s", p, err)
		}
	}
	return err
}

func (p *NoteInvitationShareRelationship) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteInvitationShareRelationship(%+v)", *p)
}

type NoteShareRelationships struct {
	Invitations            []*NoteInvitationShareRelationship `thrift:"invitations,1"`
	Memberships            []*NoteMemberShareRelationship     `thrift:"memberships,2"`
	InvitationRestrictions *NoteShareRelationshipRestrictions `thrift:"invitationRestrictions,3"`
}

func NewNoteShareRelationships() *NoteShareRelationships {
	return &NoteShareRelationships{}
}

func (p *NoteShareRelationships) IsSetInvitations() bool {
	return p.Invitations != nil && len(p.Invitations) > 0
}

func (p *NoteShareRelationships) IsSetMemberships() bool {
	return p.Memberships != nil && len(p.Memberships) > 0
}

func (p *NoteShareRelationships) IsSetInvitationRestrictions() bool {
	return p.InvitationRestrictions != nil
}

func (p *NoteShareRelationships) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteShareRelationships) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Invitations = make([]*NoteInvitationShareRelationship, 0, size)
	for i := 0; i < size; i++ {
		_elem42 := NewNoteInvitationShareRelationship()
		if err := _elem42.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem42)
		}
		p.Invitations = append(p.Invitations, _elem42)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NoteShareRelationships) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Memberships = make([]*NoteMemberShareRelationship, 0, size)
	for i := 0; i < size; i++ {
		_elem43 := NewNoteMemberShareRelationship()
		if err := _elem43.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem43)
		}
		p.Memberships = append(p.Memberships, _elem43)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NoteShareRelationships) readField3(iprot thrift.TProtocol) error {
	p.InvitationRestrictions = NewNoteShareRelationshipRestrictions()
	if err := p.InvitationRestrictions.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.InvitationRestrictions)
	}
	return nil
}

func (p *NoteShareRelationships) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteShareRelationships"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteShareRelationships) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Invitations != nil {
		if p.IsSetInvitations() {
			if err := oprot.WriteFieldBegin("invitations", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:invitations: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Invitations)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Invitations {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:invitations: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteShareRelationships) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Memberships != nil {
		if p.IsSetMemberships() {
			if err := oprot.WriteFieldBegin("memberships", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:memberships: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Memberships)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Memberships {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:memberships: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteShareRelationships) writeField3(oprot thrift.TProtocol) (err error) {
	if p.InvitationRestrictions != nil {
		if p.IsSetInvitationRestrictions() {
			if err := oprot.WriteFieldBegin("invitationRestrictions", thrift.STRUCT, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:invitationRestrictions: %s", p, err)
			}
			if err := p.InvitationRestrictions.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.InvitationRestrictions)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:invitationRestrictions: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteShareRelationships) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteShareRelationships(%+v)", *p)
}

type ManageNoteSharesParameters struct {
	NoteGuid             string                             `thrift:"noteGuid,1"`
	MembershipsToUpdate  []*NoteMemberShareRelationship     `thrift:"membershipsToUpdate,2"`
	InvitationsToUpdate  []*NoteInvitationShareRelationship `thrift:"invitationsToUpdate,3"`
	MembershipsToUnshare []edam.UserID                      `thrift:"membershipsToUnshare,4"`
	InvitationsToUnshare []edam.IdentityID                  `thrift:"invitationsToUnshare,5"`
}

func NewManageNoteSharesParameters() *ManageNoteSharesParameters {
	return &ManageNoteSharesParameters{}
}

func (p *ManageNoteSharesParameters) IsSetNoteGuid() bool {
	return p.NoteGuid != ""
}

func (p *ManageNoteSharesParameters) IsSetMembershipsToUpdate() bool {
	return p.MembershipsToUpdate != nil && len(p.MembershipsToUpdate) > 0
}

func (p *ManageNoteSharesParameters) IsSetInvitationsToUpdate() bool {
	return p.InvitationsToUpdate != nil && len(p.InvitationsToUpdate) > 0
}

func (p *ManageNoteSharesParameters) IsSetMembershipsToUnshare() bool {
	return p.MembershipsToUnshare != nil && len(p.MembershipsToUnshare) > 0
}

func (p *ManageNoteSharesParameters) IsSetInvitationsToUnshare() bool {
	return p.InvitationsToUnshare != nil && len(p.InvitationsToUnshare) > 0
}

func (p *ManageNoteSharesParameters) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ManageNoteSharesParameters) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.NoteGuid = v
	}
	return nil
}

func (p *ManageNoteSharesParameters) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.MembershipsToUpdate = make([]*NoteMemberShareRelationship, 0, size)
	for i := 0; i < size; i++ {
		_elem44 := NewNoteMemberShareRelationship()
		if err := _elem44.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem44)
		}
		p.MembershipsToUpdate = append(p.MembershipsToUpdate, _elem44)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ManageNoteSharesParameters) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.InvitationsToUpdate = make([]*NoteInvitationShareRelationship, 0, size)
	for i := 0; i < size; i++ {
		_elem45 := NewNoteInvitationShareRelationship()
		if err := _elem45.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem45)
		}
		p.InvitationsToUpdate = append(p.InvitationsToUpdate, _elem45)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ManageNoteSharesParameters) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.MembershipsToUnshare = make([]edam.UserID, 0, size)
	for i := 0; i < size; i++ {
		var _elem46 edam.UserID
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem46 = edam.UserID(v)
		}
		p.MembershipsToUnshare = append(p.MembershipsToUnshare, _elem46)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ManageNoteSharesParameters) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.InvitationsToUnshare = make([]edam.IdentityID, 0, size)
	for i := 0; i < size; i++ {
		var _elem47 edam.IdentityID
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem47 = edam.IdentityID(v)
		}
		p.InvitationsToUnshare = append(p.InvitationsToUnshare, _elem47)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ManageNoteSharesParameters) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ManageNoteSharesParameters"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ManageNoteSharesParameters) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoteGuid() {
		if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:noteGuid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.NoteGuid)); err != nil {
			return fmt.Errorf("%T.noteGuid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:noteGuid: %s", p, err)
		}
	}
	return err
}

func (p *ManageNoteSharesParameters) writeField2(oprot thrift.TProtocol) (err error) {
	if p.MembershipsToUpdate != nil {
		if p.IsSetMembershipsToUpdate() {
			if err := oprot.WriteFieldBegin("membershipsToUpdate", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:membershipsToUpdate: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MembershipsToUpdate)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.MembershipsToUpdate {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:membershipsToUpdate: %s", p, err)
			}
		}
	}
	return err
}

func (p *ManageNoteSharesParameters) writeField3(oprot thrift.TProtocol) (err error) {
	if p.InvitationsToUpdate != nil {
		if p.IsSetInvitationsToUpdate() {
			if err := oprot.WriteFieldBegin("invitationsToUpdate", thrift.LIST, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:invitationsToUpdate: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InvitationsToUpdate)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.InvitationsToUpdate {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:invitationsToUpdate: %s", p, err)
			}
		}
	}
	return err
}

func (p *ManageNoteSharesParameters) writeField4(oprot thrift.TProtocol) (err error) {
	if p.MembershipsToUnshare != nil {
		if p.IsSetMembershipsToUnshare() {
			if err := oprot.WriteFieldBegin("membershipsToUnshare", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:membershipsToUnshare: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.I32, len(p.MembershipsToUnshare)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.MembershipsToUnshare {
				if err := oprot.WriteI32(int32(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:membershipsToUnshare: %s", p, err)
			}
		}
	}
	return err
}

func (p *ManageNoteSharesParameters) writeField5(oprot thrift.TProtocol) (err error) {
	if p.InvitationsToUnshare != nil {
		if p.IsSetInvitationsToUnshare() {
			if err := oprot.WriteFieldBegin("invitationsToUnshare", thrift.LIST, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:invitationsToUnshare: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.I64, len(p.InvitationsToUnshare)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.InvitationsToUnshare {
				if err := oprot.WriteI64(int64(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:invitationsToUnshare: %s", p, err)
			}
		}
	}
	return err
}

func (p *ManageNoteSharesParameters) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManageNoteSharesParameters(%+v)", *p)
}

type ManageNoteSharesError struct {
	IdentityID        edam.IdentityID             `thrift:"identityID,1"`
	UserID            edam.UserID                 `thrift:"userID,2"`
	UserException     *edam.EDAMUserException     `thrift:"userException,3"`
	NotFoundException *edam.EDAMNotFoundException `thrift:"notFoundException,4"`
}

func NewManageNoteSharesError() *ManageNoteSharesError {
	return &ManageNoteSharesError{}
}

func (p *ManageNoteSharesError) IsSetIdentityID() bool {
	return p.IdentityID != 0
}

func (p *ManageNoteSharesError) IsSetUserID() bool {
	return p.UserID != 0
}

func (p *ManageNoteSharesError) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *ManageNoteSharesError) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *ManageNoteSharesError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ManageNoteSharesError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.IdentityID = edam.IdentityID(v)
	}
	return nil
}

func (p *ManageNoteSharesError) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.UserID = edam.UserID(v)
	}
	return nil
}

func (p *ManageNoteSharesError) readField3(iprot thrift.TProtocol) error {
	p.UserException = edam.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ManageNoteSharesError) readField4(iprot thrift.TProtocol) error {
	p.NotFoundException = edam.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *ManageNoteSharesError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ManageNoteSharesError"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ManageNoteSharesError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIdentityID() {
		if err := oprot.WriteFieldBegin("identityID", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:identityID: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.IdentityID)); err != nil {
			return fmt.Errorf("%T.identityID (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:identityID: %s", p, err)
		}
	}
	return err
}

func (p *ManageNoteSharesError) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err := oprot.WriteFieldBegin("userID", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:userID: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UserID)); err != nil {
			return fmt.Errorf("%T.userID (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:userID: %s", p, err)
		}
	}
	return err
}

func (p *ManageNoteSharesError) writeField3(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if p.IsSetUserException() {
			if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:userException: %s", p, err)
			}
			if err := p.UserException.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.UserException)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:userException: %s", p, err)
			}
		}
	}
	return err
}

func (p *ManageNoteSharesError) writeField4(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if p.IsSetNotFoundException() {
			if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:notFoundException: %s", p, err)
			}
			if err := p.NotFoundException.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:notFoundException: %s", p, err)
			}
		}
	}
	return err
}

func (p *ManageNoteSharesError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManageNoteSharesError(%+v)", *p)
}

type ManageNoteSharesResult struct {
	Errors []*ManageNoteSharesError `thrift:"errors,1"`
}

func NewManageNoteSharesResult() *ManageNoteSharesResult {
	return &ManageNoteSharesResult{}
}

func (p *ManageNoteSharesResult) IsSetErrors() bool {
	return p.Errors != nil && len(p.Errors) > 0
}

func (p *ManageNoteSharesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ManageNoteSharesResult) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Errors = make([]*ManageNoteSharesError, 0, size)
	for i := 0; i < size; i++ {
		_elem48 := NewManageNoteSharesError()
		if err := _elem48.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem48)
		}
		p.Errors = append(p.Errors, _elem48)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ManageNoteSharesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ManageNoteSharesResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ManageNoteSharesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Errors != nil {
		if p.IsSetErrors() {
			if err := oprot.WriteFieldBegin("errors", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:errors: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Errors)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Errors {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:errors: %s", p, err)
			}
		}
	}
	return err
}

func (p *ManageNoteSharesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManageNoteSharesResult(%+v)", *p)
}
