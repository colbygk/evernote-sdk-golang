// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"edam"
	"flag"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  SyncState getSyncState(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  SyncChunk getFilteredSyncChunk(string authenticationToken, i32 afterUSN, i32 maxEntries, SyncChunkFilter filter)")
	fmt.Fprintln(os.Stderr, "  SyncState getLinkedNotebookSyncState(string authenticationToken, LinkedNotebook linkedNotebook)")
	fmt.Fprintln(os.Stderr, "  SyncChunk getLinkedNotebookSyncChunk(string authenticationToken, LinkedNotebook linkedNotebook, i32 afterUSN, i32 maxEntries, bool fullSyncOnly)")
	fmt.Fprintln(os.Stderr, "   listNotebooks(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "   listAccessibleBusinessNotebooks(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  Notebook getNotebook(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  Notebook getDefaultNotebook(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  Notebook createNotebook(string authenticationToken, Notebook notebook)")
	fmt.Fprintln(os.Stderr, "  i32 updateNotebook(string authenticationToken, Notebook notebook)")
	fmt.Fprintln(os.Stderr, "  i32 expungeNotebook(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "   listTags(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "   listTagsByNotebook(string authenticationToken, Guid notebookGuid)")
	fmt.Fprintln(os.Stderr, "  Tag getTag(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  Tag createTag(string authenticationToken, Tag tag)")
	fmt.Fprintln(os.Stderr, "  i32 updateTag(string authenticationToken, Tag tag)")
	fmt.Fprintln(os.Stderr, "  void untagAll(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  i32 expungeTag(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "   listSearches(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  SavedSearch getSearch(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  SavedSearch createSearch(string authenticationToken, SavedSearch search)")
	fmt.Fprintln(os.Stderr, "  i32 updateSearch(string authenticationToken, SavedSearch search)")
	fmt.Fprintln(os.Stderr, "  i32 expungeSearch(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  i32 findNoteOffset(string authenticationToken, NoteFilter filter, Guid guid)")
	fmt.Fprintln(os.Stderr, "  NotesMetadataList findNotesMetadata(string authenticationToken, NoteFilter filter, i32 offset, i32 maxNotes, NotesMetadataResultSpec resultSpec)")
	fmt.Fprintln(os.Stderr, "  NoteCollectionCounts findNoteCounts(string authenticationToken, NoteFilter filter, bool withTrash)")
	fmt.Fprintln(os.Stderr, "  Note getNoteWithResultSpec(string authenticationToken, Guid guid, NoteResultSpec resultSpec)")
	fmt.Fprintln(os.Stderr, "  Note getNote(string authenticationToken, Guid guid, bool withContent, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData)")
	fmt.Fprintln(os.Stderr, "  LazyMap getNoteApplicationData(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  string getNoteApplicationDataEntry(string authenticationToken, Guid guid, string key)")
	fmt.Fprintln(os.Stderr, "  i32 setNoteApplicationDataEntry(string authenticationToken, Guid guid, string key, string value)")
	fmt.Fprintln(os.Stderr, "  i32 unsetNoteApplicationDataEntry(string authenticationToken, Guid guid, string key)")
	fmt.Fprintln(os.Stderr, "  string getNoteContent(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  string getNoteSearchText(string authenticationToken, Guid guid, bool noteOnly, bool tokenizeForIndexing)")
	fmt.Fprintln(os.Stderr, "  string getResourceSearchText(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "   getNoteTagNames(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  Note createNote(string authenticationToken, Note note)")
	fmt.Fprintln(os.Stderr, "  Note updateNote(string authenticationToken, Note note)")
	fmt.Fprintln(os.Stderr, "  i32 deleteNote(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  i32 expungeNote(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  Note copyNote(string authenticationToken, Guid noteGuid, Guid toNotebookGuid)")
	fmt.Fprintln(os.Stderr, "   listNoteVersions(string authenticationToken, Guid noteGuid)")
	fmt.Fprintln(os.Stderr, "  Note getNoteVersion(string authenticationToken, Guid noteGuid, i32 updateSequenceNum, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData)")
	fmt.Fprintln(os.Stderr, "  Resource getResource(string authenticationToken, Guid guid, bool withData, bool withRecognition, bool withAttributes, bool withAlternateData)")
	fmt.Fprintln(os.Stderr, "  LazyMap getResourceApplicationData(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  string getResourceApplicationDataEntry(string authenticationToken, Guid guid, string key)")
	fmt.Fprintln(os.Stderr, "  i32 setResourceApplicationDataEntry(string authenticationToken, Guid guid, string key, string value)")
	fmt.Fprintln(os.Stderr, "  i32 unsetResourceApplicationDataEntry(string authenticationToken, Guid guid, string key)")
	fmt.Fprintln(os.Stderr, "  i32 updateResource(string authenticationToken, Resource resource)")
	fmt.Fprintln(os.Stderr, "  string getResourceData(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  Resource getResourceByHash(string authenticationToken, Guid noteGuid, string contentHash, bool withData, bool withRecognition, bool withAlternateData)")
	fmt.Fprintln(os.Stderr, "  string getResourceRecognition(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  string getResourceAlternateData(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  ResourceAttributes getResourceAttributes(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  Notebook getPublicNotebook(UserID userId, string publicUri)")
	fmt.Fprintln(os.Stderr, "  SharedNotebook shareNotebook(string authenticationToken, SharedNotebook sharedNotebook, string message)")
	fmt.Fprintln(os.Stderr, "  CreateOrUpdateNotebookSharesResult createOrUpdateNotebookShares(string authenticationToken, NotebookShareTemplate shareTemplate)")
	fmt.Fprintln(os.Stderr, "  i32 updateSharedNotebook(string authenticationToken, SharedNotebook sharedNotebook)")
	fmt.Fprintln(os.Stderr, "  Notebook setNotebookRecipientSettings(string authenticationToken, string notebookGuid, NotebookRecipientSettings recipientSettings)")
	fmt.Fprintln(os.Stderr, "   listSharedNotebooks(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  LinkedNotebook createLinkedNotebook(string authenticationToken, LinkedNotebook linkedNotebook)")
	fmt.Fprintln(os.Stderr, "  i32 updateLinkedNotebook(string authenticationToken, LinkedNotebook linkedNotebook)")
	fmt.Fprintln(os.Stderr, "   listLinkedNotebooks(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  i32 expungeLinkedNotebook(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  AuthenticationResult authenticateToSharedNotebook(string shareKeyOrGlobalId, string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  SharedNotebook getSharedNotebookByAuth(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  void emailNote(string authenticationToken, NoteEmailParameters parameters)")
	fmt.Fprintln(os.Stderr, "  string shareNote(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  void stopSharingNote(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  AuthenticationResult authenticateToSharedNote(string guid, string noteKey, string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  RelatedResult findRelated(string authenticationToken, RelatedQuery query, RelatedResultSpec resultSpec)")
	fmt.Fprintln(os.Stderr, "  UpdateNoteIfUsnMatchesResult updateNoteIfUsnMatches(string authenticationToken, Note note)")
	fmt.Fprintln(os.Stderr, "  ManageNotebookSharesResult manageNotebookShares(string authenticationToken, ManageNotebookSharesParameters parameters)")
	fmt.Fprintln(os.Stderr, "  ShareRelationships getNotebookShares(string authenticationToken, string notebookGuid)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = math.MinInt32 // will become unneeded eventually
	_ = strconv.Atoi
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := edam.NewNoteStoreClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "getSyncState":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSyncState requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetSyncState(value0))
		fmt.Print("\n")
		break
	case "getFilteredSyncChunk":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetFilteredSyncChunk requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err358 := (strconv.Atoi(flag.Arg(2)))
		if err358 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		tmp2, err359 := (strconv.Atoi(flag.Arg(3)))
		if err359 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		arg360 := flag.Arg(4)
		mbTrans361 := thrift.NewTMemoryBufferLen(len(arg360))
		defer mbTrans361.Close()
		_, err362 := mbTrans361.WriteString(arg360)
		if err362 != nil {
			Usage()
			return
		}
		factory363 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt364 := factory363.GetProtocol(mbTrans361)
		argvalue3 := edam.NewSyncChunkFilter()
		err365 := argvalue3.Read(jsProt364)
		if err365 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.GetFilteredSyncChunk(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getLinkedNotebookSyncState":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetLinkedNotebookSyncState requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg367 := flag.Arg(2)
		mbTrans368 := thrift.NewTMemoryBufferLen(len(arg367))
		defer mbTrans368.Close()
		_, err369 := mbTrans368.WriteString(arg367)
		if err369 != nil {
			Usage()
			return
		}
		factory370 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt371 := factory370.GetProtocol(mbTrans368)
		argvalue1 := edam.NewLinkedNotebook()
		err372 := argvalue1.Read(jsProt371)
		if err372 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.GetLinkedNotebookSyncState(value0, value1))
		fmt.Print("\n")
		break
	case "getLinkedNotebookSyncChunk":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetLinkedNotebookSyncChunk requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg374 := flag.Arg(2)
		mbTrans375 := thrift.NewTMemoryBufferLen(len(arg374))
		defer mbTrans375.Close()
		_, err376 := mbTrans375.WriteString(arg374)
		if err376 != nil {
			Usage()
			return
		}
		factory377 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt378 := factory377.GetProtocol(mbTrans375)
		argvalue1 := edam.NewLinkedNotebook()
		err379 := argvalue1.Read(jsProt378)
		if err379 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		tmp2, err380 := (strconv.Atoi(flag.Arg(3)))
		if err380 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		tmp3, err381 := (strconv.Atoi(flag.Arg(4)))
		if err381 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		argvalue4 := flag.Arg(5) == "true"
		value4 := argvalue4
		fmt.Print(client.GetLinkedNotebookSyncChunk(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "listNotebooks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListNotebooks requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ListNotebooks(value0))
		fmt.Print("\n")
		break
	case "listAccessibleBusinessNotebooks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListAccessibleBusinessNotebooks requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ListAccessibleBusinessNotebooks(value0))
		fmt.Print("\n")
		break
	case "getNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.GetNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "getDefaultNotebook":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDefaultNotebook requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDefaultNotebook(value0))
		fmt.Print("\n")
		break
	case "createNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg389 := flag.Arg(2)
		mbTrans390 := thrift.NewTMemoryBufferLen(len(arg389))
		defer mbTrans390.Close()
		_, err391 := mbTrans390.WriteString(arg389)
		if err391 != nil {
			Usage()
			return
		}
		factory392 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt393 := factory392.GetProtocol(mbTrans390)
		argvalue1 := edam.NewNotebook()
		err394 := argvalue1.Read(jsProt393)
		if err394 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "updateNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg396 := flag.Arg(2)
		mbTrans397 := thrift.NewTMemoryBufferLen(len(arg396))
		defer mbTrans397.Close()
		_, err398 := mbTrans397.WriteString(arg396)
		if err398 != nil {
			Usage()
			return
		}
		factory399 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt400 := factory399.GetProtocol(mbTrans397)
		argvalue1 := edam.NewNotebook()
		err401 := argvalue1.Read(jsProt400)
		if err401 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "expungeNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExpungeNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.ExpungeNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "listTags":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListTags requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ListTags(value0))
		fmt.Print("\n")
		break
	case "listTagsByNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ListTagsByNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.ListTagsByNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "getTag":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTag requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.GetTag(value0, value1))
		fmt.Print("\n")
		break
	case "createTag":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateTag requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg410 := flag.Arg(2)
		mbTrans411 := thrift.NewTMemoryBufferLen(len(arg410))
		defer mbTrans411.Close()
		_, err412 := mbTrans411.WriteString(arg410)
		if err412 != nil {
			Usage()
			return
		}
		factory413 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt414 := factory413.GetProtocol(mbTrans411)
		argvalue1 := edam.NewTag()
		err415 := argvalue1.Read(jsProt414)
		if err415 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateTag(value0, value1))
		fmt.Print("\n")
		break
	case "updateTag":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateTag requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg417 := flag.Arg(2)
		mbTrans418 := thrift.NewTMemoryBufferLen(len(arg417))
		defer mbTrans418.Close()
		_, err419 := mbTrans418.WriteString(arg417)
		if err419 != nil {
			Usage()
			return
		}
		factory420 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt421 := factory420.GetProtocol(mbTrans418)
		argvalue1 := edam.NewTag()
		err422 := argvalue1.Read(jsProt421)
		if err422 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateTag(value0, value1))
		fmt.Print("\n")
		break
	case "untagAll":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UntagAll requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.UntagAll(value0, value1))
		fmt.Print("\n")
		break
	case "expungeTag":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExpungeTag requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.ExpungeTag(value0, value1))
		fmt.Print("\n")
		break
	case "listSearches":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListSearches requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ListSearches(value0))
		fmt.Print("\n")
		break
	case "getSearch":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSearch requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.GetSearch(value0, value1))
		fmt.Print("\n")
		break
	case "createSearch":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateSearch requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg431 := flag.Arg(2)
		mbTrans432 := thrift.NewTMemoryBufferLen(len(arg431))
		defer mbTrans432.Close()
		_, err433 := mbTrans432.WriteString(arg431)
		if err433 != nil {
			Usage()
			return
		}
		factory434 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt435 := factory434.GetProtocol(mbTrans432)
		argvalue1 := edam.NewSavedSearch()
		err436 := argvalue1.Read(jsProt435)
		if err436 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateSearch(value0, value1))
		fmt.Print("\n")
		break
	case "updateSearch":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateSearch requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg438 := flag.Arg(2)
		mbTrans439 := thrift.NewTMemoryBufferLen(len(arg438))
		defer mbTrans439.Close()
		_, err440 := mbTrans439.WriteString(arg438)
		if err440 != nil {
			Usage()
			return
		}
		factory441 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt442 := factory441.GetProtocol(mbTrans439)
		argvalue1 := edam.NewSavedSearch()
		err443 := argvalue1.Read(jsProt442)
		if err443 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateSearch(value0, value1))
		fmt.Print("\n")
		break
	case "expungeSearch":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExpungeSearch requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.ExpungeSearch(value0, value1))
		fmt.Print("\n")
		break
	case "findNoteOffset":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "FindNoteOffset requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg447 := flag.Arg(2)
		mbTrans448 := thrift.NewTMemoryBufferLen(len(arg447))
		defer mbTrans448.Close()
		_, err449 := mbTrans448.WriteString(arg447)
		if err449 != nil {
			Usage()
			return
		}
		factory450 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt451 := factory450.GetProtocol(mbTrans448)
		argvalue1 := edam.NewNoteFilter()
		err452 := argvalue1.Read(jsProt451)
		if err452 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := edam.Guid(argvalue2)
		fmt.Print(client.FindNoteOffset(value0, value1, value2))
		fmt.Print("\n")
		break
	case "findNotesMetadata":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "FindNotesMetadata requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg455 := flag.Arg(2)
		mbTrans456 := thrift.NewTMemoryBufferLen(len(arg455))
		defer mbTrans456.Close()
		_, err457 := mbTrans456.WriteString(arg455)
		if err457 != nil {
			Usage()
			return
		}
		factory458 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt459 := factory458.GetProtocol(mbTrans456)
		argvalue1 := edam.NewNoteFilter()
		err460 := argvalue1.Read(jsProt459)
		if err460 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		tmp2, err461 := (strconv.Atoi(flag.Arg(3)))
		if err461 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		tmp3, err462 := (strconv.Atoi(flag.Arg(4)))
		if err462 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		arg463 := flag.Arg(5)
		mbTrans464 := thrift.NewTMemoryBufferLen(len(arg463))
		defer mbTrans464.Close()
		_, err465 := mbTrans464.WriteString(arg463)
		if err465 != nil {
			Usage()
			return
		}
		factory466 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt467 := factory466.GetProtocol(mbTrans464)
		argvalue4 := edam.NewNotesMetadataResultSpec()
		err468 := argvalue4.Read(jsProt467)
		if err468 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.FindNotesMetadata(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "findNoteCounts":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "FindNoteCounts requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg470 := flag.Arg(2)
		mbTrans471 := thrift.NewTMemoryBufferLen(len(arg470))
		defer mbTrans471.Close()
		_, err472 := mbTrans471.WriteString(arg470)
		if err472 != nil {
			Usage()
			return
		}
		factory473 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt474 := factory473.GetProtocol(mbTrans471)
		argvalue1 := edam.NewNoteFilter()
		err475 := argvalue1.Read(jsProt474)
		if err475 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.FindNoteCounts(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getNoteWithResultSpec":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetNoteWithResultSpec requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		arg479 := flag.Arg(3)
		mbTrans480 := thrift.NewTMemoryBufferLen(len(arg479))
		defer mbTrans480.Close()
		_, err481 := mbTrans480.WriteString(arg479)
		if err481 != nil {
			Usage()
			return
		}
		factory482 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt483 := factory482.GetProtocol(mbTrans480)
		argvalue2 := edam.NewNoteResultSpec()
		err484 := argvalue2.Read(jsProt483)
		if err484 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetNoteWithResultSpec(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getNote":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetNote requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		argvalue4 := flag.Arg(5) == "true"
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		fmt.Print(client.GetNote(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "getNoteApplicationData":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetNoteApplicationData requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.GetNoteApplicationData(value0, value1))
		fmt.Print("\n")
		break
	case "getNoteApplicationDataEntry":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetNoteApplicationDataEntry requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetNoteApplicationDataEntry(value0, value1, value2))
		fmt.Print("\n")
		break
	case "setNoteApplicationDataEntry":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "SetNoteApplicationDataEntry requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.SetNoteApplicationDataEntry(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "unsetNoteApplicationDataEntry":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UnsetNoteApplicationDataEntry requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.UnsetNoteApplicationDataEntry(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getNoteContent":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetNoteContent requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.GetNoteContent(value0, value1))
		fmt.Print("\n")
		break
	case "getNoteSearchText":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetNoteSearchText requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.GetNoteSearchText(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getResourceSearchText":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetResourceSearchText requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.GetResourceSearchText(value0, value1))
		fmt.Print("\n")
		break
	case "getNoteTagNames":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetNoteTagNames requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.GetNoteTagNames(value0, value1))
		fmt.Print("\n")
		break
	case "createNote":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateNote requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg514 := flag.Arg(2)
		mbTrans515 := thrift.NewTMemoryBufferLen(len(arg514))
		defer mbTrans515.Close()
		_, err516 := mbTrans515.WriteString(arg514)
		if err516 != nil {
			Usage()
			return
		}
		factory517 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt518 := factory517.GetProtocol(mbTrans515)
		argvalue1 := edam.NewNote()
		err519 := argvalue1.Read(jsProt518)
		if err519 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateNote(value0, value1))
		fmt.Print("\n")
		break
	case "updateNote":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateNote requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg521 := flag.Arg(2)
		mbTrans522 := thrift.NewTMemoryBufferLen(len(arg521))
		defer mbTrans522.Close()
		_, err523 := mbTrans522.WriteString(arg521)
		if err523 != nil {
			Usage()
			return
		}
		factory524 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt525 := factory524.GetProtocol(mbTrans522)
		argvalue1 := edam.NewNote()
		err526 := argvalue1.Read(jsProt525)
		if err526 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateNote(value0, value1))
		fmt.Print("\n")
		break
	case "deleteNote":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DeleteNote requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.DeleteNote(value0, value1))
		fmt.Print("\n")
		break
	case "expungeNote":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExpungeNote requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.ExpungeNote(value0, value1))
		fmt.Print("\n")
		break
	case "copyNote":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CopyNote requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := edam.Guid(argvalue2)
		fmt.Print(client.CopyNote(value0, value1, value2))
		fmt.Print("\n")
		break
	case "listNoteVersions":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ListNoteVersions requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.ListNoteVersions(value0, value1))
		fmt.Print("\n")
		break
	case "getNoteVersion":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetNoteVersion requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		tmp2, err538 := (strconv.Atoi(flag.Arg(3)))
		if err538 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		argvalue4 := flag.Arg(5) == "true"
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		fmt.Print(client.GetNoteVersion(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "getResource":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetResource requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		argvalue4 := flag.Arg(5) == "true"
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		fmt.Print(client.GetResource(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "getResourceApplicationData":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetResourceApplicationData requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.GetResourceApplicationData(value0, value1))
		fmt.Print("\n")
		break
	case "getResourceApplicationDataEntry":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetResourceApplicationDataEntry requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetResourceApplicationDataEntry(value0, value1, value2))
		fmt.Print("\n")
		break
	case "setResourceApplicationDataEntry":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "SetResourceApplicationDataEntry requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.SetResourceApplicationDataEntry(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "unsetResourceApplicationDataEntry":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UnsetResourceApplicationDataEntry requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.UnsetResourceApplicationDataEntry(value0, value1, value2))
		fmt.Print("\n")
		break
	case "updateResource":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateResource requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg561 := flag.Arg(2)
		mbTrans562 := thrift.NewTMemoryBufferLen(len(arg561))
		defer mbTrans562.Close()
		_, err563 := mbTrans562.WriteString(arg561)
		if err563 != nil {
			Usage()
			return
		}
		factory564 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt565 := factory564.GetProtocol(mbTrans562)
		argvalue1 := edam.NewResource()
		err566 := argvalue1.Read(jsProt565)
		if err566 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateResource(value0, value1))
		fmt.Print("\n")
		break
	case "getResourceData":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetResourceData requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.GetResourceData(value0, value1))
		fmt.Print("\n")
		break
	case "getResourceByHash":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetResourceByHash requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		argvalue4 := flag.Arg(5) == "true"
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		fmt.Print(client.GetResourceByHash(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "getResourceRecognition":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetResourceRecognition requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.GetResourceRecognition(value0, value1))
		fmt.Print("\n")
		break
	case "getResourceAlternateData":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetResourceAlternateData requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.GetResourceAlternateData(value0, value1))
		fmt.Print("\n")
		break
	case "getResourceAttributes":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetResourceAttributes requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.GetResourceAttributes(value0, value1))
		fmt.Print("\n")
		break
	case "getPublicNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetPublicNotebook requires 2 args")
			flag.Usage()
		}
		tmp0, err581 := (strconv.Atoi(flag.Arg(1)))
		if err581 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := edam.UserID(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetPublicNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "shareNotebook":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ShareNotebook requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg584 := flag.Arg(2)
		mbTrans585 := thrift.NewTMemoryBufferLen(len(arg584))
		defer mbTrans585.Close()
		_, err586 := mbTrans585.WriteString(arg584)
		if err586 != nil {
			Usage()
			return
		}
		factory587 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt588 := factory587.GetProtocol(mbTrans585)
		argvalue1 := edam.NewSharedNotebook()
		err589 := argvalue1.Read(jsProt588)
		if err589 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.ShareNotebook(value0, value1, value2))
		fmt.Print("\n")
		break
	case "createOrUpdateNotebookShares":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateOrUpdateNotebookShares requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg592 := flag.Arg(2)
		mbTrans593 := thrift.NewTMemoryBufferLen(len(arg592))
		defer mbTrans593.Close()
		_, err594 := mbTrans593.WriteString(arg592)
		if err594 != nil {
			Usage()
			return
		}
		factory595 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt596 := factory595.GetProtocol(mbTrans593)
		argvalue1 := edam.NewNotebookShareTemplate()
		err597 := argvalue1.Read(jsProt596)
		if err597 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateOrUpdateNotebookShares(value0, value1))
		fmt.Print("\n")
		break
	case "updateSharedNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateSharedNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg599 := flag.Arg(2)
		mbTrans600 := thrift.NewTMemoryBufferLen(len(arg599))
		defer mbTrans600.Close()
		_, err601 := mbTrans600.WriteString(arg599)
		if err601 != nil {
			Usage()
			return
		}
		factory602 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt603 := factory602.GetProtocol(mbTrans600)
		argvalue1 := edam.NewSharedNotebook()
		err604 := argvalue1.Read(jsProt603)
		if err604 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateSharedNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "setNotebookRecipientSettings":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "SetNotebookRecipientSettings requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg607 := flag.Arg(3)
		mbTrans608 := thrift.NewTMemoryBufferLen(len(arg607))
		defer mbTrans608.Close()
		_, err609 := mbTrans608.WriteString(arg607)
		if err609 != nil {
			Usage()
			return
		}
		factory610 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt611 := factory610.GetProtocol(mbTrans608)
		argvalue2 := edam.NewNotebookRecipientSettings()
		err612 := argvalue2.Read(jsProt611)
		if err612 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.SetNotebookRecipientSettings(value0, value1, value2))
		fmt.Print("\n")
		break
	case "listSharedNotebooks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListSharedNotebooks requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ListSharedNotebooks(value0))
		fmt.Print("\n")
		break
	case "createLinkedNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateLinkedNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg615 := flag.Arg(2)
		mbTrans616 := thrift.NewTMemoryBufferLen(len(arg615))
		defer mbTrans616.Close()
		_, err617 := mbTrans616.WriteString(arg615)
		if err617 != nil {
			Usage()
			return
		}
		factory618 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt619 := factory618.GetProtocol(mbTrans616)
		argvalue1 := edam.NewLinkedNotebook()
		err620 := argvalue1.Read(jsProt619)
		if err620 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateLinkedNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "updateLinkedNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateLinkedNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg622 := flag.Arg(2)
		mbTrans623 := thrift.NewTMemoryBufferLen(len(arg622))
		defer mbTrans623.Close()
		_, err624 := mbTrans623.WriteString(arg622)
		if err624 != nil {
			Usage()
			return
		}
		factory625 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt626 := factory625.GetProtocol(mbTrans623)
		argvalue1 := edam.NewLinkedNotebook()
		err627 := argvalue1.Read(jsProt626)
		if err627 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateLinkedNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "listLinkedNotebooks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListLinkedNotebooks requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ListLinkedNotebooks(value0))
		fmt.Print("\n")
		break
	case "expungeLinkedNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExpungeLinkedNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.ExpungeLinkedNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "authenticateToSharedNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AuthenticateToSharedNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AuthenticateToSharedNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "getSharedNotebookByAuth":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSharedNotebookByAuth requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetSharedNotebookByAuth(value0))
		fmt.Print("\n")
		break
	case "emailNote":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "EmailNote requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg635 := flag.Arg(2)
		mbTrans636 := thrift.NewTMemoryBufferLen(len(arg635))
		defer mbTrans636.Close()
		_, err637 := mbTrans636.WriteString(arg635)
		if err637 != nil {
			Usage()
			return
		}
		factory638 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt639 := factory638.GetProtocol(mbTrans636)
		argvalue1 := edam.NewNoteEmailParameters()
		err640 := argvalue1.Read(jsProt639)
		if err640 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.EmailNote(value0, value1))
		fmt.Print("\n")
		break
	case "shareNote":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ShareNote requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.ShareNote(value0, value1))
		fmt.Print("\n")
		break
	case "stopSharingNote":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "StopSharingNote requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := edam.Guid(argvalue1)
		fmt.Print(client.StopSharingNote(value0, value1))
		fmt.Print("\n")
		break
	case "authenticateToSharedNote":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AuthenticateToSharedNote requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.AuthenticateToSharedNote(value0, value1, value2))
		fmt.Print("\n")
		break
	case "findRelated":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "FindRelated requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg649 := flag.Arg(2)
		mbTrans650 := thrift.NewTMemoryBufferLen(len(arg649))
		defer mbTrans650.Close()
		_, err651 := mbTrans650.WriteString(arg649)
		if err651 != nil {
			Usage()
			return
		}
		factory652 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt653 := factory652.GetProtocol(mbTrans650)
		argvalue1 := edam.NewRelatedQuery()
		err654 := argvalue1.Read(jsProt653)
		if err654 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg655 := flag.Arg(3)
		mbTrans656 := thrift.NewTMemoryBufferLen(len(arg655))
		defer mbTrans656.Close()
		_, err657 := mbTrans656.WriteString(arg655)
		if err657 != nil {
			Usage()
			return
		}
		factory658 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt659 := factory658.GetProtocol(mbTrans656)
		argvalue2 := edam.NewRelatedResultSpec()
		err660 := argvalue2.Read(jsProt659)
		if err660 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.FindRelated(value0, value1, value2))
		fmt.Print("\n")
		break
	case "updateNoteIfUsnMatches":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateNoteIfUsnMatches requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg662 := flag.Arg(2)
		mbTrans663 := thrift.NewTMemoryBufferLen(len(arg662))
		defer mbTrans663.Close()
		_, err664 := mbTrans663.WriteString(arg662)
		if err664 != nil {
			Usage()
			return
		}
		factory665 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt666 := factory665.GetProtocol(mbTrans663)
		argvalue1 := edam.NewNote()
		err667 := argvalue1.Read(jsProt666)
		if err667 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateNoteIfUsnMatches(value0, value1))
		fmt.Print("\n")
		break
	case "manageNotebookShares":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ManageNotebookShares requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg669 := flag.Arg(2)
		mbTrans670 := thrift.NewTMemoryBufferLen(len(arg669))
		defer mbTrans670.Close()
		_, err671 := mbTrans670.WriteString(arg669)
		if err671 != nil {
			Usage()
			return
		}
		factory672 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt673 := factory672.GetProtocol(mbTrans670)
		argvalue1 := edam.NewManageNotebookSharesParameters()
		err674 := argvalue1.Read(jsProt673)
		if err674 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.ManageNotebookShares(value0, value1))
		fmt.Print("\n")
		break
	case "getNotebookShares":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetNotebookShares requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetNotebookShares(value0, value1))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
